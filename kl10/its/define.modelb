.TITLE	"KL10 MICROCODE 29-MARCH-1978"
.VERSION/MAJOR=1/MINOR=0/EDIT=212/WHO=0
.NOBIN

;	THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.  DIGITAL EQUIPMENT CORPORATION ASSUMES NO
; RESPONSIBITY FOR ANY ERRORS THAT MAY APPEAR IN THIS DOCUMENT.
;	THE SOFTWARE DESCRIBED IN THIS DOCUMENT IS FURNISHED TO THE
; PURCHASER UNDER A LICENSE FOR USE ON A SINGLE COMPUTER SYSTEM AND
; CAN BE COPIED (WITH INCLUSION OF DIGITAL'S COPYRIGHT NOTICE) ONLY
; FOR USE IN SUCH SYSTEM, EXCEPT AS MAY OTHERWISE BE PROVIDED IN WRITING
; BY DIGITAL.
;	DIGITAL EQUIPMENT CORPORATION ASSUMES NO RESPONSIBILITY FOR THE
; USE OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED
; BY DIGITAL.
;	COPYRIGHT (C) 1975, 1976, 1977, 1978 DIGITAL EQUIPMENT CORPORATION


.TOC	"REVISION HISTORY"

;REV	WHY
;212	CHANGE THE CODE AT LDIND: TO TEST FOR USER MODE IF USER MODE
;	TURN OFF SPECIAL CYCLE THAT MAY STILL BE ON. THE MICROCODE WILL DEPEND
;	ON KERNAL PROGRAMS TO NOT GET IN PAGE POINTER
;	LOOPS. INSTRUCTIONS EXECUTED FROM THE CONSOLE WILL NOT WORK.
;	PI INSTRUCTIONS GET A RESTRICTION TO NOT GET INDIRECT PAGE POINTERS
;	IN THEIR PAGING CHAIN AS DO EXAMINES AND DEPOSITS AND BYTE TRANSFERS.
;211	CHANGE THE TEST FOR INDIRECT POINTERS TO NOT HAPPEN ON SECTION
;	POINTERS AND JUST ON INDIRECT PAGE POINTERS. AT LDIND:+1 AND LDIMM:+2
;210	MAKE ALL AC+# MICROINSTRUCTIONS HAVE THE # FIELD THE SAME IN THE
;	PREVIOUS MICROINSTRUCTION TO SOLVE A TIMONG GLITCH IN THE HARDWARE.
;	MAKE EXCHANG MARK AND DESTINATION POINTERS UUO IF THEY DO NOT
;	HAVE BYTE POINTERS OF EQUAL LENGTH. CHANGES PERVASIVE IN EIS ALSO IN PF
;	RECOVERY IN IO.
;	MAKE THE LOAD OF AN INDIRECT POINTER CLEAR PI CYCLE IF SET.
;	THIS MEANS THAT THE MONITOR CANNOT USE KERNAL CYCLE, INSTR ABORT
;	INH PC+1 OR HALT IN A PI CYCLE IF AN INDIRECT POINTER CAN
;	BE A PART OF THE REFILL. ALSO NOTE THE POSSIBILITY OF GETTING AN
;	INTERUPT BEFOR THE PI INSTRUCTION COMPLETES. (NEVER CONTINUES PI
;	INSTRUCTION) CHANGES AT LDIND.
;207	CHANGE SBUS DIAG CODE FOR MOS PUT IT IN MOS CONDITIONAL /MOS=1
;	IF ON SBUS DIAG TRIES AT LEAST 8 TIMES TO GET A RESPONSE
;	OTHER THAN -1 IF IT GOT -1 ALL THOSE TIMES THE MICROCODE
;	GIVES UP AND RETURNS 0
;206	FINAL FIXES TO PUSHM AND POPM
;205	FIX BUG IN INDEX CALCULATION OF E1 FOR EXTENDED ADDRESSING.
;	INDEXING REQUIRED THAT AN AREAD BE PERFORMED IN ORDER TO LOAD
;	THE AR WITH A CORRECT FINAL RESULT. THE EFFECTIVE ADDRESS CALCULATION
;	AROUND EXTLA: GOT A NEW MACRO ADDED FOR INDEXING THAT DOES THE AREAD.
;	ABSOLUTE LOCATIONS IN THE RANGE 3040 GET USED AS TARGETS FOR THIS
;	AREAD THEN THE CODE REJOINS THE OLD CODE AT EXT2: 
;	THE AREAD WAS NECESSARY FOR THE HARDWARE MAGIC TO LOAD PARTS OF THE
;	AR DEPENDING ON THE INDEX REGISTER AND OTHER EXTENDED ADRESSING
;	PARAMETERS.
;204	ADD AUTOMATIC VERSION NUMBER
;	ADD CODE TO DO SBUS DIAG TESTING REQUIRED BY MOS
;203	PUT THE BLKO PAG, CHANGE IN 201 IN A KLPAGING CONDITIONAL
;	KIPAGING GETS TANGLED IN AR PARITY ERRORS AND IN GENERAL DOES
;	THE WRONG THINGS
;202	TURN OFF IMULI OPTIMIZATION IT GETS THE SIGN BIT AND THE OVERFLOW
;	FOULED UP (TURNED OFF FOR MODEL B ONLY WAS OFF IN MODEL A)
;201	CHANGE BLKO PAG, TO INVALIDATE ONLY ONE ENTRY BY CLEARING IT
;	CHANGES AT PAGBO PAGBO+1 AND CLRPT+3 CLRPT+3 GETS SETUP THAT USED
;	TO BE AT PAGBO+1, PAGBO+1 NOW CLEARS ENTRY AND QUITS
;	KLPAGE ERROR CHECK FOR TOPS 10 MODEL A TO CAUSE ERROR
;	IF SWITCH SETTINGS ARE IN CONFLICT DIDDLED
;200	CHANGE ALL EXEC REF TRACKS FEATURES BACK TO PHYS REF
;	ON SUSPICION THAT PAGE FAULTS ARE NOT HANDLED PROPERLY
;	MAKE NON TRACKS INSTR STAT FEATURES GET FOUR PHYSICAL
;	PAGE NUMBERS FROM FIRST FOUR LOCATIONS IN THE PAGE PRESENTED
;	IN THE DATAO PI, THE CODE ALSO USES THAT PAGE FIRST
;	LOCATION TO PUT THE INITIAL JUNK INTO ON STARTUP
;177	FIX SOME BUGS IN OPCODE TIMING CODE AT OPTM0: AND BEYOND
;176	ADD TO THE TIME COUNTING CODE CODE THAT COUNTS FREQUENCY
;	OF EACH OPCODE IN PAGE+2 AND PAGE+3
;175	FIX TIME COUNTING CODE TO ACOUNT FOR EACH OPCODE IN THE
;	USER OR EXEC MODE IT WAS SEEN IN, EDGE COUNTS WERE DONE IN
;	WRONG MODE CHANGES UNDER OP.TIME CONDITONALS (PERVASIVE)
;174	CHANGE TRACKS AND TIME COUNTING TO USE EXEC VIRTUAL SPACE
;	INSTEAD OF PHYSICAL SPACE
;173	SEPERATE OUT THE DISMISS AT 626: BECAUSE OF SUSPECTED BUG
;172	THE FACT THAT XJEN DISMISSES BEFORE READING NEW PC WORDS CAUSES
;	A PROBLEM FOR TOPS 20. REHASH THE CODE AT 600: TO 637: TO MAKE
;	XJEN READ THE TWO WORDS FIRST AND THEN DISMISS.
;171	CAUSE IO PAGE FAIL FIX IN 170 TO SHIFT AT END GETTING CORRECT
;	PAGE FAIL WORD CHANGE AT IOPGF:
;170	MAKE CLRFPD: GO DIRECT TO FINI: INSTEAD OF THROUGH NOP: THIS WAS
;	COSTING 2 TICS IN BYTE INSTRUCTIONS
;	CHANGE IO PAGE FAIL TO SAVE A VIRTUAL ADDRESS IN THE AC BLOCK 7
;	LOCATION 2 INSTEAD OF THE DATA THAT WAS ON THE EBUS CHANGES AT
;	PGF4:+1 AND IOPGF:
;167	CHANGE DEFAULT ON ADB MIXER SELECTS. NO DEFAULT NOW SUBFIELD U23
;	IS DEFAULTED TO 1 TO AVOID SELECTING FM AND NEEDING TO WAIT FOR PARITY.
;	THIS LEAVES THE OTHER BIT OF THE FIELD AVAILABLE FOR PARITY
;	EPT MOVED TO 540 USING SWITCH IN KLX,KLL (KLA,KLB NOW DEFUNCT)
;166	CHANGE FIELD DEFINITION FORMAT CHANGE THE WAY THE OPTIONS FIELD
;	GETS ITS VALUES ASSIGNED. EACH BIT GETS A FIELD DEFINITION.
;165	BUG IN 161 TO 164 WAS MISSING AC0 AT POP2: PARITY BIT WAS PUT THERE
;	IN THE NEWER MICROCODES
;	INSTALL MANY THINGS TO MAKE WORD STRING MOVES WORK START AT
;	MOVWD1 AND UNTILL BMVWD1 ALSO ASSORTED MACROS ARE ADDED
;	THESE ARE INSTALLED IN A SEPERATED EIS FILE (WDEIS) FOR THE MOST PART
;	THERE ARE SOME NEW MACROS AND THE CLEAN+17 LOCATION IS USED FOR
;	THIS CASE UNDER MODEL B CONDITIONAL INTERRUPTS DO NOT WORK YET
;	IN THIS CODE BUT ALL DATA TRANSFERS ARE CORRECT. INTERRUPTS ARE
;	TAKEN SO SUSPECT THE PROBLEM IS IN THE CLEANUP CODE.
;164	LEAVE IN ONLY MAP FIX
;163	TAKE OUT MAP FIX LEAVING XHLLI IN AND JRSTF IN
;162	PUT XHLLI BACK IN TAKE OUT JRSTF ONLY IN SEC 0 CODE
;161	XHLLI OUT TO DEBUG ADD RSTF0: TO MAKE TEST FOR JRSTF IN NON
;	0 SECTIONS TEST IN ALL CASES
;157	INSTALL XHLLI MAKE JRSTF UUO ON NON ZERO SECTIONS
;	ALSO MAKE MAP DOING A REFILL PAGE FAIL RIGHT THIS MEANS THAT AFTER
;	CLEAN IT CANNOT DO ANYTHING INTERESTING IF AN INTERRUPT IS PENDING
;	CHANGES AT MAP2:
;156	REINSERT A SKP INTRPT IN THE PAGE FAULT HANDLER TO HAVE INDIRECT
;	POINTER CHAINS INTERRUPTABLE. AT PGRF6:+6
;155	ABORTIVE MAP FIX FIX REMOVED PROBLEM MUST BE FIXED IN HARDWARE.
;154	ADD TESTS FOR AC'S IN PHYSICAL REFERENCES FOR EXAMINES AND DEPOSITS
;	PHYS REFS GO TO MEMORY, NOT AC'S AFTER PROBLEM SHEET 1675
;	CHANGES AT PILD+3 PIFET+2 PSTOR PHYS1 PHYS2 PHYS3
;	ADD CHANGES IN TRACKS TO MAKE MODEL A WORK AT TRK2+2 AND +3
;153	ADD SPECIAL CODE FOR PXCT OF BLT THIS HOPEFULLY CAN GO AWAY
;	WHEN THE EXTENDED ADDRESSING MONITOR DOES NOT USE PXCT ANYMORE
;	IT IS UNDER .IF/BLT.PXCT CONDITIONAL AND COSTS 12 WORDS
;152	CHANGE WHAT BLT DOES TO MATCH THE SPEC SR_BLT(XXX) IS CHANGED TO
;	NOT FORCE GLOBAL ADDRESSING THE LOAD VMA(EA)_ARX+BR AND
;	STORE VMA(EA)_ARX MACROS ARE ADDED TO FORCE THE GLOBAL/LOCAL PARAMETERS
;	TO BE THE SAME AS THOSE OF THE EFFECTIVE ADDRESS
;151	PUT THE EPT AND UPT AT 540 UNDER SWITCH CONTROL .IF/EPT540
;150	VERSION NUMBER BACKED UP TO PRESERVE SPACE IN VERSION NUMBER FIELD
;304	EXTEND 0 WOULD GET A JUMP TO AN UNUSED MICROLOCATION IN MODEL.B
;	ONLY THIS WAS BECAUSE LOCATION 2002: IN MODEL.A SHOULD BE AT 3002:
;	IN MODEL.B 3002: AND 3003: PUT IN WHERE 2002: AND 2003: ARE UNDER
;	CONDITIONALS.
;303	CHANGE THE NUMBER FIELD OF THE SR_BLT(XXX) MACROS TO GIVE THE
;	BIT 0 OFF ALL THE TIME. THIS GIVES BLT MORE THE FORM OF THE OTHER
;	EXTENDED ADDRESSING STUFF IN HOW IT REFERS TO THE SHADOW AC'S.
;	IT IS STILL BELIEVED TO BE BROKEN BUT IS BETTER THAN IT WAS.
;302	ADD LONGER ADDRESS CONSTRAINTS FOR THE NEW MICROASSEMBLER. EVERY
;	LOCATION THAT THE DISPATCH RAM CAN JUMP TO IS EFFECTED. THE
;	CONSTRAINTS THATUSED TO LOOK LIKE =00**** MUST NOW LOOK LIKE
;	=0****00**** THIS IS BECAUSE THE MODEL B MACHINE CAN AND DID
;	REALLY SET THAT BIT. THE CHANGE MAKES THE MICROCODE INCOMPATIBLE
;	WITH THE OLD ASSEMBLER.
;301	HALT IS CLEARING THE RUN FLOP WITH HARDWARE MUST CHECK FOR
;	KERNAL MODE BEFOR THE HALT MACRO SO USER IOT MODE WILL
;	NOT BE ABLE TO HALT. THIS TAKES ONE MICROWORD AT 1017:
;	THE SENSE OF THE SKIP IS REVERSED AGAIN SO 1016: IS BACK TO
;	BEING THE UUO AND CHALT: IS NOW A SEPERATE WORD AFTER 1017:.
;300	REPLACE HALT CODE AGAIN BUT THIS TIME GET THE SENSE OF THE
;	SKIP RIGHT BY SWAPPING THE CONTENTS OF LOCATIONS 1016: AND 1017:
;	PUT THE 1: ADDRESS CONSTRAINT ON CONT:.
;277	PUT HALT BACK THE WAY IT WAS SKP USER HAS THE INVERSE SKIP SENSE
;	AND HENCE DOES THE WRONG THING. HALT TO BE FIXED LATER.
;276	YET ANOTHER TRY AT THE BLKO PROBLEM BLK1: SHOULD HAVE HAD A
;	J/BLK2.
;275	THE LONG PC CHANGES HAD XSFM1: BEFOR THE ADDRESS CONSTRAINT THUS
;	GIVEING THE WRONG ADDRESS. THE =0 IS PUT BEFOR THE LABEL.
;274	FIX THE DIAG.INST CONDITIONALS TO BEHAVE PROPERLY WITH THE
;	CONSTRAINTS OF DRAM LOCATIONS MAP DIED BECAUSE IT NEVER WAS
;	REACHED OUT OF A DISPATCH.
;273	INSERT THE DIAG.INST FEATURE FOR THE DIAGNOSTICS PEOPLE.
;	CHANGES AT DCODE 104:, 106: AND AT XCT: SHOULD NOT EFFECT OTHER
;	ASSEMBLIES.
;272	THE FIX TO THE GARBAGE IN THE LEFT HALF OF VMA IN 265 FORGOT TO
;	LOAD THE VMA IN BLK3:+1 PUT THAT IN. ALSO ON JUD'S RECOMENDATION
;	PUT A COPY OF THE NOP MICROINSTRUCTION AFTER CLRFPD: TO MAKE
;	ENOUGH TIME IN THE SKIP CASE. IT SEEMED TO WORK WITHOUT THIS
;	AND IF SPACE GETS TIGHT IT SOULD BE REMOVED.
;271	FIX IN 267 PGF4:+4 DOES NOT WORK, CANNOT PUT VMA_# THERE. POSSIBLY BECAUSE
;	VMA_# CONFLICTS IN SOME ESOTERIC WAY WITH STORE? THAT CHANGE
;	IS TAKEN OUT AND AT PGF1 THE VMA IS GIVEN 500 OR 501. THIS IS SLIGHTLY
;	LESS DESIREABLE AND FURTHER EFFORT COULD BE SPENT IN THE UCODE TO
;	MAKE PAGE FAILS LESS UNWEILDY FOR THE SOFTWARE ROUTINE THAT CONVERTS
;	THEM TO MODEL B FORM.
;270	CHANGE HALT TO CHECK FOR USER MODE INSTEAD OF IO LEGAL. A JOB
;	IN USER IOT SHOULD NOT BE ABLE TO HALT THE MACHINE.
;267	ADD NEW CONDITIONAL SHIFT.MUUO TO PROVIDE THE SHIFTED DOWN MUUO
;	DATA BLOCKS MORE SIMILAR TO THE XADDR TYPES. CONDITIONAL IS USED
;	AT 1003: AND PGF4:+4 TO PROVIDE A DIFFERENT STARTING ADDRESS.
;266	FIX PILD+3 TO LOAD THE VMA AT THE SAME TIME THUS ENABLING
;	THE MODEL HACK FIX TO LOAD THE LONG VMA.
;265	HAIR UP THE ALREADY HAIRY BLKXX CODE TO CLOBBER THE LEFT HALF OF AR
;	BEFOR USING IT AS AN ADDRESS. CLOBBERED ARL AT BLK2 AND LOADED
;	VMA AT BLK3.
;264	ADD J/CLRFPD AT BFIN TO MAKE IT THE SAME AS IT WAS. BFIN GOT
;	MOVED TO A DIFFERENT PLACE IN THE LAST EDIT AND THIS J FIELD
;	WAS NOT FIXED.
;263	ADD THE MIT FIXES. IOTEND AND THE BLK1 TO BLK4 GROUP ARE CHANGED
;	EXTENSIVELY. CLRFPD IS PUT JUST BEFORE FINI CONSTRAINT ON IOFET
;	IS CHANGED.
;	ADD THE LONG PC FORMAT UNDER A NEW CONDITIONAL LONG.PC THE
;	CONDITIONAL IS TURNED ON BY XADDR. CONDITIONALS ARE ADDED TO THE
;	LONG PC CODE TO MAKE IT SMALLER WHEN ONLY SECTION 0 IS POSSIBLE.
;	ADD COMMENTS TO THE MICROCODE OPTIONS FIELD.
;	RESTORE SXCT CODE FROM VERSION 131. TO BE USED ONLY IN MODEL A
;	NON KLPAGING CODE.
;262	PUT WORD AT INDR1+1 UNDER SXCT CONDITIONAL SO WHEN SXCT IS OFF WE
;	GET AN ADDITIONAL SAVINGS OF ONE WORD.
;261	ADD PHYS REFS AT PGRF6+4 AND PIDISP+4 TO MAKE MODEL.A LOAD A LONG
;	VMA. PART OF THIS CODE IS NOT UNDER CONDITIONAL BECAUSE IT SHOULD NOT MATTER
;	TO A MODEL.B MACHINE. PIDISP+4 ALSO GETS THE LOAD OF THE SAME DATA
;	REPEATED SO THE PHYS REF HAS SOMETHING TO WORK ON.
;	FLUSH THE NOW USELESS CODE AT CHALT TO GENERATE THE LD AR.PHYS
;	CONSTANTS.
;	CURRENTLY THERE IS SORT OF A BUG IN THAT THE SBR AND THE CBR
;	CAN NOT BE ABOVE 256K IN A MODEL.A MACHINE. THIS DOES NOT BOTHER
;	THE CURRENT MONITORS AT ALL IN THAT THESE TABLES ARE IN VERY LOW CORE.
;	IF THAT CHANGES THE LOCATIONS SECIMM+3 SECIMM+7, LDIND, PGRF5, LDSHR
;	AND LDPT1+1 MUST ALL GET FIXED UP. THE GENERAL FIX IS TO GET A PHYS REF
;	IN THE MICROINSTRUCTION THAT LOADS THE VMA. THIS CAN BE DONE BY
;	POSTPONING THE LOAD OF THE VMA ONE MICROINSTRUCTION IN ALL OF THESE
;	PLACES, BUT, SINCE THAT CAUSES A PERFORMANCE DEGRADATION IT WAS NOT
;	DONE.
;260	DIVERGANT CHANGES TO MAKE KLPAGING PHYS REFS THE OLD WAY
;	CAUSE ALL CASES OF VMA_XXX+LD AR.PHYS TO GO BACK TO THE 
;	OLD PHYS REF WAY
;257	IN MODEL B MACHINES AT LDPT+1 THE VMA IS GETTING GARBAGE IN THE
;	LEFT HALF BECAUSE IT ADDED IN JUNK THAT WAS IN AR LEFT. FIX IS TO
;	CLEAR ARL AFTER LDPT AND TO DO THE SHUFFLE PERFORMED THERE ONE
;	MICROINSTRUCTION LATER.
;******	A HACK FIX IS USED HERE THAT TAKES TWO WORDS. THIS WAS DONE BECAUSE
;	OF EXTREEM TIME PRESSURE TO DEBUG >256K MODEL B. THERE OUGHT TO BE
;	A WAY TO REDUCE THIS FIX TO ONLY ONE WORD IN SPACE AND TIME, OR
;	EVEN LESS.
;256	EDIT JUMPED TO RANDOMNESS WITH AN EXTRA RETURN. THIS HAPPENED
;	BECAUSE THERE WAS NO CALL AT EDSFLT IN THE MODEL B NON XADDR CODE
;	ADDED CALL TO EDSFLT.
;255	SAVE EDIT FROM GETTING AN EXTRA STORE CYCLE AT EDSSIG BY SENDING
;	IT ALWAYS TO THE EDFLT1 LOCATION INSTEAD OF EDFLT THIS ONLY
;	CHANGES WHAT HAPPENS IN MODEL B NON XADDR BECAUSE IN MODEL A
;	EDFLT AND EDFLT1 ARE THE SAME LOCATION ANYWAY
;254	CAUSE THE A INDRCT CHANGE IN 253 TO BE ONLY FOR NON EXTENDED
;	ADDRESSING MACHINES. THIS THROWS DOUBT ON THE WORD SAVINGS
;	THAT MIGHT HAVE BEEN POSSIBLE
;253	CHANGE A INDRCT TO LOAD BOTH THE AR AND ARX, IN THE EXTENDED
;	INSTRUCTION SET THIS HAPPENED TO BE DEPENDED ON AT EXT2+2 AND
;	EXT2+3. THE DEFINITION OF A IND IN EA CALC/ WAS FIXED TO
;	LOAD THE AR AND THE ARX
;	I THINK THIS PERMITS THE SAVINGS OF AN EXTRA WORD AND SOME
;	TIME ON ALL INDIRECTS. CHECK OUT FLUSHING INDR1 AND MAKING INDRCT
;	DO THE DISPATCH AND GO TO COMPEA
;	  FORCE ADB TO GENERATE AR*4 AS DEFAULT THIS DISABLES PARITY
;	CHECKING ON THE FM WHEN IT IS NOT BEING READ FIXED IN
;	DEFINITION OF ADB THIS WILL ALSO SPEED UP THE MACHINE BY SOME
;	BECAUSE THE ADB FIELD CAN NO LONGER FORCE 3 TICS WITHOUT REALLY
;	NEEDING THAT LONG
;252	SAVE A WORD AT IOPGF+1 BY MAKING IT PILD+3 THIS ADDS THE SET
;	ACCOUNT ENABLE TO AN UNDEFINED CASE.
;251	TURNING ON PAGING CAUSED A HANG THIS WAS BECAUSE OF A MISIMPLIMENTED
;	FIX IN 250. THE ATTEMPT TO PUT THAT FIX IN NO SPACE FAILED AND IT TOOK
;	ONE WORD. AT LDPT+1 ADD BR/AR AT GTCST1 RECOVER THE AR FROM THE BR
;	THIS SEEMS LIKE IT SHOULD BE ABLE TO BE BUMMED BUT I CANNOT
;	FIGURE OUT HOW
;	ALSO FIX A PLACE WHERE A PHYS REF WAS LEFT IN THE MODEL A CODE
;	AT PGRF6+4 MODEL B CONDITIONAL IS AS IT WAS MODEL A IS NEW TO USE
;	LD AR.PHYS MECHANISM
;250	LOADING HIGH ORDER GARBAGE TO THE VMA WITH THE FIX FOR
;	>256K CAUSES FUNNY THINGS TO HAPPEN. BITS GET CLOBBERED
;	WITH AR0-8_SCAD 14 LINES AFTER SECIMM. ACTUALLY IS MORE
;	HAIR BECAUSE OF CONFLICTING FIELDS. CODE ABOVE AND BELOW
;	THAT GOT REARRANGED TO SIMPLER MODEL A AND MODEL B CONDITIONALS
;	SINCE NOW ALL LINES ARE DIFFERENT. SHUFFLING OF FE IS DONE
;	TO PROVIDE ROOM FOR A CONSTANT ON THE CORRECT SIDE OF THE SCAD
;	AT LDPT A SIMILAR
;	RECODING IS NEEDED. 4 LINES OF CODE ARE REDONE IN MODEL
;	A CONDITIONAL AND CONDITIONALS ARE RESHUFFLED TO HAVE
;	SIMPLER FORMAT
;	NEW MACROS ARE ADDED GEN AR0-8, GEN FE AND AR0-8
;	VMA_AR+LD AR.PHYS AND ITS FRIENDS ARE TAKEN OUT OF KLPAGING
;	CONDITIONAL THEY ARE USED TO DO EXAMINES AND DEPOSITS NOW
;247	FIX ST AR.PHYS TO GIVE BIT 4 INSTEAD OF BIT 5 AT CHALT
;	AT PSTORE CHECK FOR AC REF AND IF SO WRITE FM MUST DO THIS
;	BECAUSE LOAD AD FUNC DOES NOT SET MCL STORE AR
;246	FIX MUUO, IN EXTENDED ADDRESSING, TO GET NEW PC BEFORE CLOBBERING
;	THE USER AND PUBLIC FLAGS THAT TELL WHERE TO GET IT.  FIX CONDITIONAL
;	ASSEMBLY AT INDRCT TO DO EA TYPE DISP IN MODEL A, NOT MODEL B.
;245	ADDITIONAL FIXES FOR THE 256K PROBLEM, TO MAKE EXAMINE AND
;	DEPOSIT WORK.  CHANGES AT CHALT TO CREATE CONSTANT "ST AR.PHYS",
;	AND EXTENSIVELY NEAR PICYC1, PIDATI, AND PIDATO.  CHANGES ARE ALL
;	UNDER MODEL B CONDITIONAL, BECAUSE MODEL B HARDWARE WORKS OK, AND
;	THE FIX IS REGARDED AS CROCKISH.
;244	WAIT FOR COMPLETION OF INDIRECT REFERENCE AT BYTEI+1 AND EXTI+1
;	EVEN THOUGH INTERRUPT REQUEST HAS BEEN SEEN, SO AS NOT TO CONFUSE MBOX.
;243	VARIOUS FIXES TO MAKE THESE SOURCES WITH MODEL.B SWITCH OFF
;	EQUIVALENT TO MODEL A SOURCES, SO WE CAN DISCARD MODEL A SOURCES
;	THE FIXES ARE:
;		1) SWITCH SNORM.OPT, TO SAVE SPACE IN SINGLE PRECISION
;		FLOATING NORMALIZATION.
;		2) CREATION OF LD AR.PHYS MAGIC CONSTANT, TO SOLVE HARDWARE
;		PROBLEMS GENERATING ADDRESSES ABOVE 256K.
;242	FIX AT SECPTR+1 TO PRESERVE AR LEFT UNTIL WE CAN CHECK
;	FOR BITS 12-17 NON ZERO CORRECT ADDRESS CONSTRAINTS AT
;	SECIMM+1 & +2 TO GET BRANCHING RIGHT FOR SHARED AND INDIRECT
;	SECTION POINTERS.  FIX AT LDIMM+1 TO CLEAR LH OF AR BEFORE
;	LOADING VMA WITH SPT ADDRESS, TO PREVENT PAGE FAULT ON SPT
;	REFERENCE.
;241	MORE FIXES AT START: AND NEWPC:, FOR SAME PROBLEM AS 240.
;	MUST LOAD FLAGS AND CLEAR VMAX, THEN LOAD VMA INTO PC TO CLEAR
;	PCX, THEN RELOAD VMA TO GET EFFECT OF NEW FLAGS AND CLEARED
;	PCX.  (MODEL A ONLY).
;240	FIXES AT START: AND NEWPC: TO LOAD 23-BIT ADDRESS RATHER
;	THAN 30-BIT, SINCE OTHER BITS ARE PC FLAGS.  AT SAME TIME AND
;	PLACE, FIX MODEL A CODE TO CLEAR PC SECTION NUMBER.
;237	CHANGE CONDITIONALS AROUND PUSH AND POP CODE FROM XADDR TO
;	MODEL.B. COULD SIMPLIFY IFNOT XADDR.
;236	FIX ADDRESS CONSTRAINTS ON USES OF EA MOD DISP IN MODEL
;	B MACHINE WITH EXTENDED ADDRESSING OFF.  PROBLEMS AT COMPEA,
;	BFETCH, AND EXT2.
;235	SLIGHTLY CLEANER FIXES FOR PROBLEMS IN 234 TO AVOID WASTING TIME
;	AND SPACE.  BYTE READ MACRO NEEDS TO SET VMA/LOAD, AND VMA_VMA
;	HELD MACRO DOESN'T USE MEM FIELD UNLESS MODEL B AND KL PAGING.
;	ALSO FIX CONDITIONAL ASSEMBLY STUFF TO AVOID SPURIOUS ERRORS.
;234	INSTALL FIXES FOR SOME PLACES WHERE MODEL B CODE CAUSES CONFLICT
;	WITH THE OLD NON KLPAGING NON EXTENDED ADDRESSING CODE
;	THESE ARE AT BFETCH, PGF3-1, PGF6, EXT1+2
;233	FIX THE FOLLOWING PROBLEMS:
;		KL PAGING SHOULD PRODUCE A PAGE FAILURE WHEN BITS
;		 12-17 OF A PRIVATE SECTION POINTER ARE NON 0
;		 FIXED AT SECPTR ETC.
;		EDIT DOES NOT ALLOW INTERUPTS
;		 FIXED AT EDNXT1 AND AFTER THAT
;		MAP SHOULD NOT BE LEGAL IN USER MODE
;		 FIXED AT MAP2 AND CLEAN+15
;		MOVMI IS SHORTENED BY MAKING IT THE SAME AS MOVEI
;		 AT DON LEWINES SUGGESTION THIS IS IN DCODE 215
;232	MERGE THE SECOND ORDER STATISTICS GATHERING CODE WITH THIS
;	CODE INTENT IS TO KEEP IT HERE
;231	CHANGE THE LOAD CCA DEFINITION TO REFLECT THE NEW HARDWARE
;	THIS IS ENABLED WHEN THE MODEL.B ASSEMBLY SWITCH IS ON
;230	THIS IS THE POINT WHERE MICHAEL NEWMAN TAKES OVER THE MICROCODE
;	MAINTENCE SEVERAL BUG FIXES GET EDITED INTO 126 AT THIS POINT
;	TWO SETS OF PARALLEL CODE WILL BE MAINTAINED FOR A WHILE.
;	FIX THE CMPS PARODY ERROR PROBLEM WHEN ILLEGAL BITS ARE FOUND IN
;	THE LENGTHS.
;227	FIX PIBYTE TO GET DTE# CORRECT ON TO-10 TRANSFERS.  FIX MTRREQ
;	CYCLES TO WAIT FOR STORE TO FINISH BEFORE RE-ENABLING ACCOUNT.
;	FIX ADJSP OF LONG STACK POINTERS TO FETCH NEXT INSTR.
;226	FIX EXMD TO LOAD AR, RATHER THAN ARX, WITH MARK POINTER, AS
;	EXPECTED BY THE HANDLER.  FIX EDIT, SEVERAL PLACES, TO IGNORE
;	LEFT HALF OF MARK & PATTERN ADDRESSES WHEN PC SECTION IS ZERO.
;	FIX EDIT TO MAKE EXTENDED REFERENCE FOR PATTERN BYTES.
;	FIX ADJSP TO BE MEANINGFUL WITH LONG STACK POINTERS
;225	FIX BYTEA NOT TO CLOBBER FE ON INDIRECTS, FIX EXMD TO BACK
;	UP VMA AFTER STORING DSTP2 AND BEFORE STORING DSTP.  FIX EDIT TO
;	COUNT THE WHOLE PATTERN ADDRESS IF PC SECTION NOT ZERO.
;224	FIX EXTEND ADDRESS CALCULATION TO RECOVER E0 FROM MQ, AND
;	FIX EXTEND OPCODE TEST TO DISALLOW OPS >20.
;	FIXES TO HANDLE NEW ENCODING OF AC-OP ON APR BOARD.
;223	COMPLETE 222.  P HAS TO GO TO SC AS WELL AS AR0-5.  CREATE
;	SUBROUTINE RESETP TO DO IT.  GET CODE IN SYNC WITH HARDWARE AND
;	MOST RECENT SPEC FOR MEANING OF PXCT AC BITS IN EXTEND.  THUS
;	UNDO COMMENT IN 221:  WE SHOULD LOOK AT PXCT B11.  ALSO FIX
;	EXTEND TO USE CORRECT ENCODING OF BITS 9, 11, AND 12 FOR PXCT
;	OF STRING OPERATIONS.  FIX DATAI PAG SO IT DOESN'T LOSE THE
;	PREVIOUS CONTEXT AC BLOCK WHEN LOADING PREVIOUS SECTION #.
;	INSERT CHANGE CLAIMED FOR EDIT 55, TO INHIBIT INTERRUPT DURING
;	PI CYCLES.
;222	FIX BYTE POINTER UPDATE ROUTINES GSRC & IDST IN EIS CODE
;	TO UPDATE P WHEN INCREMENTING SECOND WORD.  JUST FORGOT TO. TRY
;	AGAIN TO CONTROL EIS REFERENCES OFF E0, FOR EXTENDED OR NOT.
;221	COMPLETE FIX OF 220, TO KEEP SR CORRECT THROUGH RELOAD OF IR
;	IN EXTEND DECODING, AND TO CONTROL SR CORRECTLY FOR XBLT DST
;	REFERENCES.  (WE WERE LOOKING AT PXCT B11, SHOULD BE B12).
;220	FIXES SEVERAL PLACES TO USE "EA" IN DRAM A FIELD INSTEAD OF "I",
;	NOTABLY BLT, WHICH WAS USING WRONG SECTION.  FIX EXTEND TO
;	CONTROL VMA EXTENDED BEFORE FETCHING EXTEND-OP, SO AS NOT TO
;	LOOK "UNDER" THE AC'S.  FIX XBLT FOREWARD TO STOP WHEN AC GOES
;	TO ZERO, NOT -1.  ALSO CONTROL SR BEFORE INITIAL STORE TO GET
;	CORRECT CONTEXT.
;217	CODE CHANGES TO MAKE SECOND WORD OF BYTE POINTER WORK RIGHT
;	WHETHER EFIW OR IFIW, BY CONTROLLING CRY18 OR CRY6.
;216	RECODE EXTENDED INSTRUCTION SET DECODING & EFFECTIVE ADDRESS
;	CALCULATION.  FIX UUO CODE TO INCREMENT VMA AFTER STORING PC.
;	FIX ADJBP TO GET 36 BIT ADDRESS ADJUSTMENT IF B12 SET.
;215	REARRANGE CONDITIONAL ASSEMBLY DEFAULTS TO BE MORE LOGICAL
;	INSERT FORM FEEDS AND COMMENTS TO HELP BEAUTIFY THE LISTING.
;	REWORK THE NEW JRST'S, TO MAKE THEM SMALLER, FASTER, AND TEST
;	IO LEGAL BEFORE DISMISSING.  PUT IN XBLT.
;214	MODIFY ADJBP AND UUO'S FOR EXTENDED ADDRESSING. REWORK PARITY
;	ERROR HANDLING, IN A FRUITLESS ATTEMPT TO MAKE IT SMALLER,
;	BUT SUCCESSFULLY MAKING IT CLEARER.  FIX ASSEMBLY ERRORS IN EIS
;	DUE TO AC4 CHANGES, AND ADD CODE TO HANDLE LONG BYTE POINTERS
;	IN AC'S.  PUT IN CODE TO GIVE PAGE FAIL 24 ON ILLEGAL FORMAT
;	INDIRECT WORD.
;213	FIX LDB & DPB TO TEST POINTER BIT 12 ON CALL TO BYTEA.
;212	MODIFY JSP, JSR TO STORE FULL PC WITHOUT FLAGS IN NON-ZERO SEC
;	SEPARATE CONDITIONALS FOR "MODEL B" MACHINE FROM THOSE FOR
;	EXTENDED ADDRESSING MICROCODE.
;211	REMOVE UNNECESSARY DIDDLING OF VMA USER BIT DURING PAGE REFILL,
;	AND ELIMINATE SPECIAL CASE FOR MAP INSTRUCTION, WHEN EXTENDED
;	ADDRESSING HARDWARE EXISTS TO SOLVE THESE PROBLEMS.
;	FIX SEVERAL CASES OF SIGNS DISP WITH INADEQUATE CONSTRAINT.
;210	FIX DEFINITION OF "SKP LOCAL AC REF", WHICH CONFUSED "AC
;	REF" WITH "LOCAL AC REF".
;207	FIX JRSTF (AND ITS DERIVATIVES) TO LOAD FLAGS INTO AR AFTER
;	DOING EA MOD DISP, WHICH WOULD OTHERWISE CLOBBER THEM.  FIX
;	COMPEA CODE TO LET AREAD HARDWARE LOAD AR.  OTHERWISE GET SEC #.
;206	FIX PCTXT ROUTINE TO GET PREVIOUS CONTEXT SECTION.
;205	FIX POPJ TO LOAD HALFWORD OR FULLWORD PC ACCORDING TO PC SECT
;204	FIX CONDITIONALS AROUND LOC 47, WRONG IN 202.  FIX DEFINITION
;	OF A INDRCT, DOESN'T NEED #07.  FIX STACK INSTRUCTIONS FOR
;	EXTENDED ADDRESSING.  MUST NOT LOAD VMA FROM FULL AD.
;203	INCLUDE CODE AT NEXT+2 TO GENERATE ADDRESS MASK (LOW 23 BITS)
;	AT HALT TIME, AND CODE IN PICYCLE TO USE IT TO GET 23 BIT ADDR
;	OUT OF IOP FUNCTION WORD.
;202	MOVE "40+A" LOCATIONS TO "A" UNDER EXTENDED ADDRESSING.  CHANGE
;	ALL CALL MACROS TO GENERATE CALL BIT INSTEAD OF SPECIAL FUNC'S.
;201	BEGIN EXTENDED ADDRESSING CHANGES IN EARNEST.  INTEGRATE NEW
;	EFFECTIVE ADDRESS COMPUTATION CODE, AND REVISE INSTRUCTION
;	ROUTINES AS NECESSARY.
;126	FIX STRAC3-2, WHERE COMMA GOT LEFT OFF WHEN IFETCH MOVED
;125	REMOVE NXT INSTR FROM STAC1, STRAC3, & STAC4, MAKING THEM JUMP
;	TO FINI INSTEAD.  PROBLEM INVOLVES A RACE IF PAGE FAIL OCCURS
;	WHILE WRITING FM.  IF FM ADDRESS CHANGES BEFORE COND/FM WRITE
;	GOES FALSE, APR BOARD MAY GRONK PARITY BIT OF SOME FM LOC'N.
;	THIS RESULTS IN SOME SOME PATHS FROM FETCH TO NICOND BECOMING
;	LONGER THAN 6 TICKS, SO THE FETCHES GOT SHUFFLED IN SOME PLACES.
;	MICROCODE PATCH ELIMINATES MOST PROBABLE CAUSE, WHICH IS PAGE
;	FAIL AT NICOND TIME WHILE WRITING AC OTHER THAN 0.  IT DOES NOT
;	TAKE CARE OF THE POSSIBILITY THAT COND/FM WRITE WILL GLITCH AT
;	INSTR 1777 TIME.
;124	FIXES IN SEVERAL PLACES TO SET AND CLEAR ACCOUNT ENABLE SO AS
;	TO GET REPEATABLE ACCOUNTING MEASURES OF USEFUL WORK DONE. THE
;	ENABLE IS NOW CLEARED FOR METER UPDATE CYCLES AND KL PAGE REFILL
;	CYCLES.  THE HARDWARE ALREADY TAKES CARE OF PI CYCLES.
;123	CORRECT 122 TO CONSTRAIN LOC "UNHALT", AND TO LOAD ARX FROM AR,
;	SO AS TO LET "SKP AR EQ" WORK.  PROBLEM AROSE BECAUSE MACRO ALSO
;	TESTS ARX00-01.  FIX EDIT, WHEN STORING DEST POINTER ON SELECT
;	SIGNIFICANCE START, TO ELIMINATE AMBIGUITY IN DEST P FIELD.
;122	SPEC CHANGE TO EXIT FROM HALT LOOP, SO THAT AR0-8=0 WITH AR9-35
;	NON-ZERO LOADS AR INTO PC TO START PROCESSOR.  THIS IS DIFFERENT
;	FROM EXECUTING JRST BECAUSE PC FLAGS ARE CLEARED.
;121	FIX TO 120 TO ALLOW A CYCLE BETWEEN FILLER FROM MEMORY AND
;	WRITING IT INTO FM (THUS PARITY CAN BE COMPUTED).  ALSO CLEAR
;	STATE REGISTER IN EDIT BEFORE GETTING NEXT PATTERN BYTE.
;120	FIX EIS TO TOLERATE PAGE FAIL ON READ OF FILL BYTE IN MOVSRJ
;	OR B2D CONVERSION.  REQUIRES GETTING FILLER BEFORE STORING DLEN
;	ALSO INTEGRATE OPCODE COUNTING/TIMING CODE UNDER CONDITIONALS
;117	FIX PARITY ERROR CODE TO WRITEBACK AR ON RPW ERROR.
;116	REWRITE OF DDIV, SO THAT THE NO-DIVIDE TEST IS ON THE MOST
;	SIGNIFICANT HALF OF THE MAGNITUDE OF THE DIVIDEND, RATHER THAN
;	THE MAGNITUDE OF THE MOST SIGNIFICANT HALF.  IN THE PROCESS,
;	SAVE TIME AND SPACE.  ALSO PUT IN CONDITIONAL ASSEMBLY VARIABLE
;	"WRTST" TO INHIBIT WRITE TEST CYCLE FOR INSTRUCTIONS WHICH
;	APPEAR NOT TO NEED IT, AND THUS TO SPEED THEM UP.
;115	FIX SBDIAG TO SET MCL REG FUNC TO INHIBIT EBOX MAY BE PAGED.
;114	RECODE STRING COMPARE TO SAVE SPACE AND TIME.  CHANGE DEFAULTS
;	FOR KLPAGING TO INCLUDE EIS, EXCLUDE TRACKS FEATURE.  CHANGE
;	KLPAGING (NEW SPEC) TO KEEP "LOGICALLY WRITABLE" IN SOFTWARE BIT
;113	RECODE KL PAGING TO ELIMINATE PROBLEM OF WRITING HARDWARE
;	PAGE TABLE BEFORE CHECKING FOR AGE TRAP, AND THEREFORE LEAVING
;	THE PAGE ACCESSIBLE AFTER THE TRAP.  THE RECODING ALSO IMPROVES
;	THE ALGORITHM IN THAT THE HARDWARE ENTRY INCLUDES THE W BIT SET
;	IF THE CORE TABLES ALLOWED WRITE AND THE CST INDICATES WRITTEN,
;	EVEN IF THE CURRENT REFERENCE WAS NOT A WRITE.
;	ALSO FIX CODE WHICH WRITES PT DIR, TO GET WRITE REF BIT FROM
;	VMA HELD INTO BIT 5 OF SAVED PAGE FAIL WORD.
;112	FIX PAGE FAIL CODE FOR USE WITH PROB SHEET 1396, WHICH LOADS
;	PC IF PAGE FAIL OCCURS ON NICOND.  THUS CODE NEEDN'T CHECK FOR
;	FETCH AT CLEAN, WHICH CAUSED OTHER PROBLEMS ON PARITY ERRORS.
;	CLEAR FE AND SC IN NXT INSTR MACRO (JUST CLEANLINESS).
;111	PATCH SEVERAL ROUTINES WITH THE FOLLOWING MACRO --
	FETCH WAIT	"MEM/MB WAIT"
;	TO PREVENT SEQUENCES IN WHICH PAGE FAIL INFO CAN GET LOST
;	BECAUSE OF LONG TIME FROM REQUEST TO MB WAIT.  THESE PATCHES
;	SHOULD BE REMOVED AFTER AN ECO HAS BEEN INSTALLED TO FIX.
;	IN ADDITION, EBUSX SUBROUTINE HAS BEEN MODIFIED TO PREVENT RACE
;	CONDITION WHEN SETTING UP IO FUNCTION WITH COND/EBUS CTL AND
;	MAGIC # BIT 4.  MUST NOT CHANGE #5 THROUGH #8 ON NEXT CYCLE.
;	FIX KLPAGING CODE TO GO BACK TO AREAD ON MAP REF, BECAUSE
;	MEM/AD FUNC DOESN'T CORRECTLY RESTORE APR REG FUNC.  ALSO MAKE
;	THE CODE SMARTER ON NO MATCH CONDITION, SO REQUEST DOESN'T HAVE
;	TO BE RESTARTED AND IMMEDIATELY FAIL AGAIN.
;110	GIVE UP ON THE OLD STRING COMPARE CODE, INSTALLING MIKE NEWMAN'S
;	VERSION.  SOMEWHAT SLOWER, BUT GIVES THE RIGHT ANSWERS.
;	FIX LDB CODE TO WAIT FOR MEM WORD EVEN IF INTERRUPT REQUEST
;	SEEN, SO AS NOT TO GET CONFUSED WHEN IT ARRIVES OR PAGE FAILS.
;	ALSO IMPROVE CLRPT ROUTINE USED BY CONO AND DATAO PAG TO START
;	LOOP WITH VMA CLEARED AND PT WR SELECTION SETUP CORRECTLY.
;107	FIX STRING COMPARES TO CHECK FOR INTERRUPT.  THIS INVOLVED
;	CHECKING DURING GSRC ROUTINE, WHICH ELIMINATES NEED FOR CHECK
;	IN SRCMOD (WHICH CALLS GSRC).  IT ALSO REQUIRED CLEARING SFLGS
;	AT STARTUP, AND ADJUSTING DLEN UPDATE CODE IN DEST FILL TO GET
;	VALID LENGTH STORED ON INTERRUPT.
;106	ELIMINATE RACE IN DECODING OF # FIELD ON MTR BOARD BY HOLDING
;	LOW 3 BITS THROUGH NEXT MICROINSTRUCTION.
;	FIX LUUO AND MUUO TO ALLOW INTERRUPTS.
;	FIX B2D OFFSET TO SIGN-EXTEND E1 AFTER INTERRUPT.  FINISH 105,
;	TO GET ENTIRE AR LOADED WHILE CLEARING MQ (ARL WAS HOLDING).
;	FIX KL PAGING TO USE VMA/1 INSTEAD OF VMA/AD WHEN RESTORING VMA
;	FROM VMA HELD OR COPIES THEREOF.
;	FIX UFA NOT TO ALWAYS GET UNDERFLOW ON NEGATIVE RESULTS.
;	SAME FIX AS EDIT 103 OF BREADBOARD.  WHERE DID IT GET LOST?
;105	FIX KL PAGING AS REVISED BY EDIT 103 TO CORRECTLY RESTORE
;	BR ON NO-MATCH CONDITION
;	ANOTHER FIX TO B2D, TO CLEAR MQ ON ENTRY.  BUG INVOLVED GARBAGE
;	FROM MQ SHIFTING INTO ARX DURING DEVELOPMENT OF POWER OF TEN.
;104	FIX BINARY TO DECIMAL CONVERSION, WHICH WAS NOT GOING TO CLEAN
;	ON FINDING AN INTERRUPT, AND ON RESTART WITH FPD SET, WAS NOT
;	SETTING UP SLEN.  TSK, TSK.  CORRECT CLEANUP FOR DEST FILL IN
;	MOVSRJ, WHICH WAS INCREMENTING BOTH SLEN AND DLEN, SHOULD
;	HAVE BEEN NEITHER.  FIX JSR, BROKEN BY EDIT 103.  JUMP MUST BE
;	TO E+1, NOT E.
;103	CREATE CONDITIONAL ASSEMBLY FOR EXTENDED ADDRESSING. UNDER IT,
;	CREATE MEM FIELD DEFINITIONS, SUPPRESS SXCT.
;	SAVE A WORD IN JSR BY USING JSTAC IN COMMON WITH PUSHJ.
;	FORCE TIME FIELD IN CASES WHERE ASSEMBLER DEFAULT SCREWS UP.
;	ADD INTERRUPT TESTS IN KL PAGING CODE TO PREVENT HANGS, AND
;	REVISE PAGE FAIL WORD TO ELIMINATE THE NEW FAIL CODES.
;102	ATTEMPT ANOTHER FIX OF MOVSRJ, CVTBDX FILL.  EDIT 71 LOSES
;	DUE TO INCONSISTENCY -- DLEN UPDATE MUST NOT PRECEED CLEANUP.
;	CREATE CONDITIONAL ASSEMBLY SWITCHES TO CONTROL EXTENDED
;	INSTRUCTION SET, DOUBLE INTEGER ARITHMETIC, AND ADJBP.  CHANGE
;	DEFAULT OF IMULI.OPT, WHICH CAN GET SIGN WRONG ON OVERFLOW.
;101	FIX METER REQUEST CODE TO "ABORT INSTR" EVEN IF NOT SETTING
;	PI CYCLE.  THIS SHOULD FIX OCCASIONAL LOSS OF TRAPS PROBLEM.
;100	FIXES TO KL PAGING CODE TO PREVENT LOADING VMA FROM AD WHILE
;	REQUESTING PHYSICAL REF.  FIX JSR TO PREVENT FM PARITY STOP
;	ON STORE TO AC.  FIX 1777 TO FORCE RECIRCULATION OF AR/ARX,
;	EVEN IF MBOX RESP STILL TRUE.
;77	FIX DDIV TO GET MQ SHIFTED LEFT ONE PLACE, WITHOUT INTRODUCING
;	AN EXTRA BIT, AT DDVX1.  THIS INVOLVES INHIBITING ADA TO PREVENT
;	AD CRY0 FROM COMMING INTO MQ35.
;76	FIX UFA TO ALLOW AN EBOX CYCLE BETWEEN FETCH AND NICOND WHEN
;	FRACTION SUM IS ZERO, AT UFA3.
;75	PUT BACK INSTRUCTION "MBREL" REMOVED BY EDIT 64.  NECESSARY TO
;	ENSURE THAT EBOX REQUEST FOR FETCH DOESN'T COME UP WHILE
;	REGISTER FUNCTION IS IN PROGRESS, WHICH WOULD CONFUSE MBOX ON
;	STARTING THE FETCH.
;74	CHANGES TO EIS FOR NEW-SPEC AC USAGE.  CHANGES TO KL PAGING FOR
;	INDIRECT, IMMEDIATE SECTION POINTERS
;73	FIX JRA TO PREVENT WRITING AC WITH DATA FRESH FROM MEMORY (ALLOW
;	A CYCLE FOR PARITY CHECK).  FIX DPB CODE TAKE ONLY 3 TICKS ON
;	RETURN FROM BYTEA, SO THAT CACHE DATA DOESN'T ARRIVE INTO AR
;	AND ARX UNTIL DPB1, WHEN THE BYTE HAS GOTTEN OUT TO MQ.
;72	FIX DEFINITION OF SP MEM/UNPAGED TO INHIBIT VMA USER.  FIX
;	PAGE FAIL CODE TO CHECK FOR VMA FETCH BEFORE LOOKING AT
;	INTERRUPT REQUEST.  PROBLEM WAS INTERRUPT CONCURRENT WITH
;	PAGE FAIL ON JRSTF TO USER.  PC FLAGS GOT RESTORED, BUT VMA
;	NEVER COPIED TO PC BECAUSE PAGE FAIL INHIBITED NICOND, AND
;	INTERRUPT ABORTED PAGE FAIL HANDLING TO LOAD PC.
;71	DEFINE FMADR/AC4=6.  FIX MOVFIL ROUTINE TO PUT AWAY UPDATED
;	LENGTH DIFFERENCE WHEN INTERRUPTED, THUS AVOIDING RANDOMNESS
;	IN MOVSRJ, CVTBDX. FIX CVTBD CALL TO MOVFIL TO PRESERVE SR.
;	CHANGE STMAC AND PIDONE FROM "FIN XFER" TO "FIN STORE", BECAUSE
;	STORE WAS IN PROGRESS, WHICH CAUSED FM WRITE IF AC REF, AND
;	GOT A PARITY ERROR DUE TO ADB/FM.
;70	FIX PXCT 4,[POP ...], WHICH DIDN'T GET DEST CONTEXT SET FOR
;	STORE.  MUST USE SR_100 TO SET IT.
;67	FIX PROBLEM IN ADJBP BY WHICH BYTES/WORD WAS GETTING LOST
;	WHEN DIVIDE ROUTINE LOADED REMAINDER INTO BR.  SOLVED BY
;	SAVING BYTES/WORD IN T1.
;66	FIX KL PAGING TO RESTORE VMA ON TRAP, SAVE ADDRESS OF POINTER
;	CAUSING TRAP, AND NOT RESTORE ARX EXCEPT FOR BLT PAGE FAIL.
;	ALSO SET TIME PARAMETER ON ADB/FM TO ALLOW TIME FOR PARITY
;	CHECKING OF FM.
;65	FIX KL PAGING CODE TO DO MBWAIT AFTER DETERMINING THAT PARITY
;	ERROR HAS NOT OCCURRED, SO AS TO GET CORRECT VMA TO SAVE.
;	CREATE SYMBOLS FOR KL PAGE FAIL CODES.  PUT CONDITIONAL
;	ASSEMBLY AROUND IMULI OPTIMIZATION CODE, AND SXCT.  CREATE
;	SYMBOL "OPTIONS" IN # FIELD FOR MICROCODE OPTIONS.
;64	MICROCODE FOR KL10 PAGING (PAGE REFILL, MAP INSTR)...
;	REMOVE UNNECESSARY INSTRUCTION MBREL: FROM SWEEP AND APRBO
;	COSMETIC CHANGES TO KEEP COMMENTS & MACRO DEFINITIONS FROM
;	OVERFLOWING LINE OF LISTING, AND INSERTION OF CONDITIONAL
;	ASSEMBLY CONTROL OF LONG FLOATING POINT INSTRUCTIONS.
;63	IN MTR REQUEST ROUTINE, DON'T DISMISS WHEN PI CYCLE HASN'T
;	BEEN SET.
;62	FIX RDMTR CODE TO PUT 35 IN SC BEFORE GOING TO DMOVEM CODE.
;61	FIX PIIBP ROUTINE TO USE CALL.M INSTEAD OF SPEC/CALL,
;	WHICH GETS OVERRIDDEN BY P_P-S... IN MTR REQUEST SERVICE
;	ROUTINE, DON'T SET PI CYCLE UNLESS REQUEST IS FOR VECTOR.
;60	FIX DATAO PAG TO DO MB WAIT AFTER STORING EBOX ACCT AND
;	BEFORE CHANGING VMA.
;57	RE-CODE USES OF A@, B@ TO USE VMA/1, RATHER THAN VMA/AD,
;	IN ORDER TO GET CORRECT CONTEXT ON INDIRECT WORD. SEE MCL4
;56	FIX SECOND PART OF PICYCLE (TAG NEXT:) TO ENSURE THAT
;	PC+1 INH, KERNEL CYCLE, ETC REMAIN UP DURING 2ND PART.
;	ALSO CHANGE SPEC/FLAG CTL FOR ECO 1261, WHICH REQUIRES
;	#07 TO BE OPPOSITE OF #04 TO GENERATE SCD LEAVE USER.
;55	FIX SPEC INSTR/SET PI CYCLE TO INHIBIT INTERRUPTS
;	(IN PARTICULAR, METER UPDATE REQUESTS).  MAKE SURE VALID
;	DATA SAVED ON IO PAGE FAIL AND PARITY ERRORS. REMOVE
;	BACKWARDS BLT... IT BROKE TOO MANY PROGRAMS.
;54	FIX OVERFLOW CHECK IN IMULI OPTIMIZATION TO INH CRY 18
;	UPDATE TO USE CONDITIONAL ASSEMBLY IN MICRO VERS 20.
;53	FIX T1,T2 PARAMETERS ON BYTE DISP, SIGNS DISP
;52	CORRECT SHIFT AMOUNT FOR IMULI OPTIMIZATION, AND FIX MACRO
;	DEFINITIONS FOR SET SR?, WHICH WERE ALWAYS SETTING SR0.
;51	OPTIMIZE IMULI OF TWO POSITIVE OPERANDS (TO SPEED UP SUBSCRIPT
;	CALCULATIONS) BY TAKING ONLY 9 MULTIPLY STEPS AND STARTING
;	NEXT INSTRUCTION FETCH EARLIER.  OPTIMIZATION CAN BE REMOVED
;	BY COMMENTING OUT TWO INSTRUCTIONS AT IMULI, AND ONE FOLLOWING
;	IMUL.  ALSO FIX APRBI/UVERS TO KEEP SERIAL # OUT OF LH.
;50	INTRODUCE SKIP/FETCH AND CODE IN PAGE FAIL RECOVERY TO LOAD
;	PC FROM VMA IF PAGE FAIL OCCURED ON FETCH, BECAUSE NICOND
;	CYCLE, WHICH SHOULD HAVE LOADED PC, GETS INHIBITED BY INSTR 1777
;	ALSO INCLUDE EXTENDED INSTRUCTION SET.
;47	UNDO XCT CHANGES OF EDIT 46, WHICH BROKE XCT DUE TO INSUFFICIENT
;	TIME FOR DRAM HOLD BEFORE USING "A READ". ALSO FIX VECTOR
;	INTERRUPT CODE TO LOOK AT CORRECT BITS FOR CONTROLLER NUMBER.
;46	FOLLOW-ON TO EDIT 45, SAVING 2 WORDS AND A CYCLE
;	ALSO MOVE JRST TO 600, JFCL TO 700, UUO'S TO 100X AS PREPARATION
;	FOR EXTENDED INSTRUCTION SET
;45	FIX SXCT TO LOOK AT AC FIELD OF SXCT, NOT SUBJECT INSTRUCTION,
;	WHEN DECIDING WHETHER TO USE BASE-TYPE ADDRESS CALCULATION.
;44	FIX PAGE FAIL LOGIC TO WORK FOR EITHER PAGE FAIL OR PARITY
;	ERROR.  EDITS 42 AND 43 BOTH WRONG.  ALSO CORRECT RACE IN
;	WRITING PERFORMANCE ANALYSIS ENABLES TO PREVENT SPURIOUS COUNTS.
;43	CORRECT USE OF PF DISP BY EDIT 42.  LOW BITS ARE INVERTED
;42	FIX BUGS INTRODUCED BY EDIT 40, WHICH MADE FLTR OF 1B0 HANG
;	TRYING TO NEGATE IT, AND FIX UP EXPONENT CORRECTION ON LONG
;	SHIFT LEFT.  ALSO PUT IN CODE TO HANDLE PARITY ERROR PAGE
;	FAILURES, AND SET TIME CONTROLS ON 43-47.
;41	REWRITE OF VECTOR INTERRUPT PROCESSING TO MAKE DTE VECTORS
;	GO TO 142+8N, WHERE N IS DTE#.  RH20 GO TO PROGRAMMED ADDRESS
;	IN EPT, EXTERNAL DEVICES USE EXEC VIRTUAL ADDRESSES.
;40	IMPROVEMENTS TO FLOATING NORMALIZATION TO MAKE LONG SHIFTS
;	FASTER, PRIMARILY TO HELP FLTR
;37	FIX FLOATING DIVIDE SO THAT THE TRUNCATED FORM OF A NEGATIVE
;	QUOTIENT IS EQUAL TO THE HIGH-ORDER PART OF THE INFINITE-
;	PRECISION QUOTIENT.  SEE COMMENTS IN THE CODE.  ALSO BUM
;	A CYCLE OUT OF FLOATING DIVIDE BY STARTING THE NORMALIZE
;	WHILE MOVING THE QUOTIENT INTO AR.
;	SEVERAL CHANGES TO MAKE TRACKS FEATURE WORK
;36	FIX CONO MTR TO PUT DATA ON BOTH HALVES, SO PI CAN SEE PIA
;35	FIX CONI PI TO READ BACK WRITE EVEN PARITY ENABLES
;34	FIX BLT USE OF SR, SO NO CORRECTION OF ARX NECESSARY
;33	FIX PAGE TABLE REFERENCES TO FORCE UNPAGED REF.  FIX TRAP
;	TO SET PC+1 INHIBIT.
;32	CORRECT SETTING OF SC FOR SHIFTING METER COUNTERS, TO GET
;	12 BITS UNUSED AT RIGHT WHEN IT GETS TO CORE.
;31	RECODE ASH AND ASHC TO SAVE SPACE
;30	FIX JFFO TO SHIFT AR CORRECTLY AT JFFO2.  BUM ADJSP TO USE
;	STMAC FOR UPDATING PDL POINTER.
;27	FIX CONI PAG TO READ EBUS.  CORRECT DEFINITIONS OF MBOX
;	REGISTER FUNCTIONS, WHICH HAD BITS 0 AND 3 INVERTED.
;26	FIX DEFINITIONS OF DIAG FUNC CONO MTR AND CONO TIM, WHICH
;	WERE REVERSED
;25	FIX DECODING OF PHYSICAL DEVICE NUMBER IN PI FUNCTION CODE
;	AND RE-CODE JFCL FOR FEWER MICROWORDS
;24	FIX JFFO TO SHIFT ON FIRST 6-BIT TEST STEP, AND JRSTF TO
;	KEEP E AND XR DISTINCT.  ALSO SET LOAD-ENABLE BITS IN
;	DATAI PAG, WORD.
;23	FIX CONO PI, TO HOLD AR ONTO EBUS THRU REL EBUS, BECAUSE
;	PI BOARD DELAYS CONO PI TO GET CONO SET EQUIVALENT.
;22	MORE JFCL FIXES.  MUST USE FLAG CTL/JFCL WHILE CLEARING BITS,
;	AS WELL AS WHILE TESTING THEM.  BUM A WORD OUT OF JFFO BY
;	MAKING THE SIXBIT COUNT NEGATIVE.  CHANGES SO SHIFT SUBR
;	RETURNS 2, BYTEA 1.  FIX SETMB TO STORE BACK AND FETCH.
;21	RE-WRITE JFCL TO KEEP LOW OPCODE BITS OUT OF AR0-1, BECAUSE
;	PC00 GETS PROPAGATED LEFT TO ADA -1 AND -2.
;20	FIX BLT TO LOAD BR WITH SRC-DST ADDR
;	ALSO SET TIME PARAMETERS ON CONDITIONAL FETCH FUNCTIONS
;17	CHANGE SWEEP ONE PAGE TO PUT PAGE # IN E, RATHER THAN ADDR.
;	ALSO CHANGE COND/FM WRITE TO MATCH ECO #1068.
;16	FIX JUMP FETCH MACRO TO LOAD VMA FROM PC+1 (TEST SATISFIED
;	OVERRIDES THIS TO HOLD VMA).  ALSO BUM ONE MICROWORD FROM MUUO.
;15	INCLUDE PAGE FAIL DISP IN DISP/ FIELD
;	ALSO MAKE MUUO STORE PROCESS CONTEXT WORD AT 426, AND SETUP
;	PCS FROM PC EXTENSION, CWSX FROM SXCT
;14	FIX DEFINITIONS OF SKIP/IO LEGAL, AC#0, SC0, EVEN PAR
;	ALSO FIX DATAO PAG, TO SEND LH DATA ON BOTH HALVES OF EBUS
;13	ALIGN SETEBR SO CALL TO SHIFT RETURNS CORRECTLY
;12	MAKE SURE AD COPIES AR DURING DATAO, CONO, AND CLEAR AR AT
;	SET DATAI TIME.
;11	FIXES TO CONTINUE CODE SO CONSOLE WORKS, AND CORRECTIONS TO
;	PROTECTED DEP/EXAM SO PROTECTION PROTECTS.
;10	FIX A READ MACRO TO VMA/PC+1.  AD OVERRIDES UNLESS DRAM A=1
;07	RE-WRITE OF PI CYCLE CODE TO RECOGNIZE NEW EBUS SPEC.
;06	FIX DEFINITIONS OF SKIPS 40-57 BY COMPLEMENTING 3 LOW ORDER BITS
;	FIX MULSUB TO CORRESPOND TO NEW CRA LOGIC
;05	FIX EBUS CTL DEFINITIONS TO GET F01 CORRECT.  CORRECT FLAG CTL
;	DEFINITIONS TO PREVENT LEAVE USER WHEN NOT WANTED, AND FIX
;	JRST/JFCL TO HAVE FLAGS IN AR WHEN NEEDED.
;04	FIX RETURNS FROM MULSUB, PUT BETTER COMMENTS ON SNORM CODE,
;	IMPROVE SNORM ALGORITHM TO MINIMIZE WORST-CASE TIME.
;03	FIX DISPATCH ADDRESS PROBLEMS, MOSTLY JRST/JFCL AND UUO'S.
;02	CHANGES PER INSTRUCTION SET REVIEW -- DELETE USE OF BIT12 OF
;	BYTE POINTERS, CHANGE BLT TO PUT FINAL SRC,DST ADDRESSES IN AC,
;	MAKE TRUNCATE FORM FLOATING POINT REALLY TRUNCATE, ELIMINATE
;	LOCAL JSYS SUPPORT, DELETE PXCT OPCODE (XCT W/ NON-ZERO AC IN
;	EXEC MODE), LUUO'S GO TO 40/41 OF CURRENT SPACE.
;01	UPDATES FOR .TITLE AND .TOC PSEUDO OPS,
;	AND VARIOUS CHANGES FOR PROTO HARDWARE
;00	CREATION, BASED ON BREADBOARD AS OF EDIT 66
.TOC	"CONDITIONAL ASSEMBLY VARIABLE DEFINITIONS"

; [COST ESTIMATES IN BRACKETS INDICATE NUMBER OF ADDITIONAL
; MICROINSTRUCTIONS REQUIRED BY TURNING ON THE FEATURE SWITCH]

.DEFAULT/TRACKS=0	;1 ENABLES STORING PC AFTER EVERY INSTRUCTION,
			; & CREATES DATAI/O PI TO READ/SETUP PC BUFFER
			;ADDRESS. [COST = 21 WDS]

.DEFAULT/OP.CNT=0	;1 ENABLES CODE TO BUILD A HISTOGRAM IN CORE
			; COUNTING USES OF EACH OPCODE IN USER & EXEC

.DEFAULT/OP.TIME=0	;1 ENABLES CODE TO ACCUMULATE TIME SPENT BY
			; EACH OPCODE

.DEFAULT/SO.CNT=0	;SECOND ORDER COUNTING IN 128K STARTING AT LOC
			; 400000 NOT DEBUGED [COST = 28 WDS]

.DEFAULT/SO2.CNT=0	;SECOND ORDER COUNTING IN 128K STARTING AT LOC
			; PRESENTED AT START DOES ONE MORE ADD THAN
			; SO.CNT AND HENCE AN INSTRUCTION TAKES
			; 120 NS LONGER THAN SO.CNT [COST = 28 WDS]

.DEFAULT/FPLONG=1	;1 ENABLES KA-STYLE DOUBLE PRECISION FLOATING
			;POINT INSTRUCTIONS: FADL, FSBL, FMPL, FDVL,
			; UFA, DFN. [COST = 49 WDS]

.DEFAULT/MULTI=0	;1 IF MULTIPROCESSOR SYSTEM, TO SUPPRESS CACHE
			;ON UNPAGED REF'S.  PAGED REF'S ARE UP TO EXEC.

.DEFAULT/KLPAGE=0	;1 ENABLES KL-MODE PAGING. [COST = 85 WDS]

.DEFAULT/SHIFT.MUUO=0	;ENABLES A DIFFERENT MUUO FORMAT FOR MODEL A
			;THAT IS SLIGHTLY CLOSER TO THE XADDR FORMAT
			;EXPECTED TO BE USED IN CONJUNCTION WITH LONG.PC
			;BUT THEY DO NOT DEPEND ON EACH OTHER

.DEFAULT/MODEL.B=0	;1 INDICATES EXTENDED ADDRESSING HARDWARE,
			;PRIMARILY 2K (RATHER THAN 1280) CONTROL RAM,
			;NEW MCL, CTL, AND APR BOARDS.

.DEFAULT/BLT.PXCT=0	;1ENABLES SPECIAL BLT CODE FOR EXTENDED ADDRESSING
			;THIS IS SUPPOSED TO GO AWAY IN THE FUTURE
			;WHEN PXCT OF BLT IS NO LONGER USED BY TOPS-20
			;THIS SHOULD ONLY BE USED BY KLX XADDR MICROCODE
			;[COST 12 WORDS]

	.IF/KLPAGE
	.IFNOT/MODEL.B
.SET/XADDR=0		;CAN'T DO EXTENDED ADDRESSING WITHOUT MODEL B
	.ENDIF/MODEL.B

	.IFNOT/KLPAGE
.SET/XADDR=0		;CAN'T HAVE EXTENDED ADDRESSING WITHOUT KL PAGE
	.ENDIF/KLPAGE

.DEFAULT/IMULI.OPT=0	;1 ENABLES OPTIMIZATION OF IMULI TO TAKE ONLY
			;NINE MULTIPLY STEPS [COST = 3 WDS]

	.IF/MODEL.B	; [COST = 19 WDS]
.SET/SXCT=0		;DONT NEED SXCT WITH EXTENDED ADDRESSING
			;CAN'T DO IT IN MODEL B HARDWARE
	.ENDIF/MODEL.B
.DEFAULT/SXCT=0		;1 ENABLES SPECIAL XCT INSTR, WHICH ALLOWS
			; DIAGNOSTICS TO GENERATE LARGE ADDRESSES.
;CONDITIONAL ASSEMBLY CONTINUED

.DEFAULT/SNORM.OPT=0	;1 ENABLES FASTER NORMALIZATION OF SINGLE-
			; PRECISION RESULTS WHICH HAVE SEVERE LOSS OF
			; SIGNIFICANCE [COST = 4 WDS]

.IFNOT/MODEL.B
	.SET/PUSHM=0	;CODE ONLY WORKS FOR MODEL B
.ENDIF/MODEL.B

.DEFAULT/PUSHM=0	;ENABLES THE PUSHM AND POPM INSTRUCTIONS
			; [COST = ??? WDS]
.DEFAULT/EXTEND=1	;1 ENABLES EXTENDED INSTRUCTION SET
			; [COST = 290 WDS]

.DEFAULT/DBL.INT=1	;1 ENABLES DOUBLE INTEGER INSTRUCTIONS
			; [COST = 59 WDS]

.DEFAULT/ADJBP=1	;1 ENABLES ADJUST BYTE POINTER
			; [COST = 24 WDS]

.DEFAULT/RPW=1		;1 ENABLES READ-PAUSE-WRITE CYCLES FOR
			;NON-CACHED REFERENCES BY CERTAIN INSTRUCTIONS.
			; [COST = 0]

.DEFAULT/WRTST=0	;1 ENABLES WRITE-TEST CYCLES AT AREAD TIME FOR
			;INSTRUCTIONS LIKE MOVEM AND SETZM.  [COST = 0]

.DEFAULT/BACK.BLT=0	;1 ENABLES BLT TO DECREMENT ADDRESSES ON EACH
			;STEP IF E < RH(AC).  BREAKS MANY PROGRAMS.
			; [COST = 9 WDS]

.IF/TRACKS		;SETUP CONTROL FOR COMMON CODE
	.SET/INSTR.STAT=1
.ENDIF/TRACKS

.IF/OP.CNT
	.SET/INSTR.STAT=1	;ENABLE COMMON CODE, ERROR IF TRACKS TOO
.ENDIF/OP.CNT

.IF/OP.TIME
	.SET/INSTR.STAT=1	;ERROR IF TRACKS OR OP.CNT ALSO SET
.ENDIF/OP.TIME

.IF/SO.CNT
	.SET/INSTR.STAT=1
.ENDIF/SO.CNT

.IF/SO2.CNT
	.SET/INSTR.STAT=1
.ENDIF/SO2.CNT

.DEFAULT/INSTR.STAT=0		;IF NO STATISTICS, TURN OFF COMMON CODE

.IF/INSTR.STAT
	.SET/NONSTD=1		;STATISTICS CODE IS NONSTANDARD
.ENDIF/INSTR.STAT

.DEFAULT/LONG.PC=0		;LONG PC FORMAT [COST 9 WORDS 11 WORDS IF XADDR]

.DEFAULT/EPT540=0		;PUT EPT AND UPT SECTION TABLES AT 540 IF ON
				;  440 IF OFF

.DEFAULT/DIAG.INST=0		;UNSUPPORTED DIAGNOSTIC MICROCODE

.IF/DIAG.INST
	.SET/NONSTD=1		;NONSTANDARD MICROCODE
.ENDIF/DIAG.INST

.DEFAULT/NONSTD=0		;NONSTANDARD MICROCODE IS NORMALLY OFF
.TOC	"HOW TO READ THE MICROCODE -- FORMATS & CONSTRUCTS"

;(1)	FIELD DEFINITIONS
;	THESE OCCUR AT THE BEGINNING OF THE LISTING, IN THE SOURCE FILE
; DEFINE.MIC (CONTROL AND DISPATCH RAM DEFINITIONS).
; THEY HAVE THE FORM:
;	SYMBOL/=<L:R>M,J
;ANOTHER FORM ACCEPTED BY THE ASSEMBLER (FOR HISTORIC REASONS) IS:
;	SYMBOL/=J,K,R,M		;THIS FORM HAS BEEN REMOVED FROM THIS CODE
;	THE PARAMETER (J) IS MEANINGFUL ONLY WHEN "D" IS SPECIFIED
; AS THE DEFAULT MECHANISM, AND IN THAT CASE, GIVES THE DEFAULT VALUE OF
; THE FIELD IN OCTAL.
;	THE PARAMETER (K) GIVES THE FIELD SIZE IN (DECIMAL) NUMBER
; OF BITS. THIS IS USED ONLY IN THE OUTDATED FORMAT.
;	THE PARAMETER (L) GIVES THE BIT POSITION OF THE LEFTMOST BIT
;IN THE FIELD. THE SAME METHOD IS USED AS FOR (R) BELOW.
;	THE PARAMETER (R) GIVES THE FIELD POSITION IN DECIMAL
; AS THE BIT NUMBER OF THE RIGHTMOST BIT OF THE FIELD.  BITS ARE NUMBERED
; FROM 0 ON THE LEFT.  NOTE THAT THE POSITION OF BITS IN THE MICROWORD
; SHOWN IN THE LISTING BEARS NO RELATION TO THE ORDERING OF BITS IN THE
; HARDWARE MICROWORD, WHERE FIELDS ARE OFTEN BROKEN UP AND SCATTERED.
;	THE PARAMETER (M) IS OPTIONAL, AND SELECTS A DEFAULT
; MECHANISM FOR THE FIELD.  THE LEGAL VALUES OF THIS PARAMETER ARE THE
; CHARACTERS "D", "T", "P", OR "+".
;	  "D" MEANS (J) IS THE DEFAULT VALUE OF THE FIELD IF NO EXPLICIT
;	VALUE IS SPECIFIED.
;	  "T" IS USED ON THE TIME FIELD TO SPECIFY THAT THE VALUE OF THE
;	FIELD DEPENDS ON THE TIME PARAMETERS SELECTED FOR OTHER FIELDS.
;	THE VALUE OF A FIELD WITH THIS SPECIFICATION DEFAULTS TO THE
;	MAX OF <SUM OF THE T1 PARAMETERS DEFINED FOR FIELD/VALUES
;	SPECIFIED IN THIS MICROINSTRUCTION>, <SUM OF THE T2 PARAMETERS
;	FOR THIS MICROINSTRUCTION>, <J PARAMETER OF THIS FIELD>.
;	WITHIN THE KL10 MICROCODE, T1 PARAMETERS ARE USED TO SPECIFY
;	FUNCTIONS WHICH DEPEND ON THE ADDER SETUP TIME, AND T2 PARAMETERS
;	ARE USED FOR FUNCTIONS WHICH REQUIRE ADDITIONAL TIME FOR CORRECT
;	SELECTION OF THE NEXT MICROINSTRUCTION ADDRESS.
;	  "P" IS USED ON THE PARITY FIELD TO SPECIFY THAT THE VALUE OF THE
;	FIELD SHOULD DEFAULT SUCH THAT PARITY OF THE ENTIRE WORD
;	IS ODD.  IF THIS OPTION IS SELECTED ON A FIELD WHOSE SIZE (K) IS
;	ZERO, THE MICRO ASSEMBLER WILL ATTEMPT TO FIND A BIT SOMEWHERE
;	IN THE WORD FOR WHICH NO VALUE IS SPECIFIED OR DEFAULTED.
;	  "+" IS USED ON THE JUMP ADDRESS FIELD TO SPECIFY THAT THE DEFAULT
;	JUMP ADDRESS IS THE ADDRESS OF THE NEXT INSTRUCTION ASSEMBLED (NOT,
;	IN GENERAL, THE CURRENT LOCATION +1).
;	IN GENERAL, A FIELD CORRESPONDS TO THE SET OF BITS WHICH PROVIDE
; SELECT INPUTS FOR MIXERS OR DECODERS, OR CONTROLS FOR ALU'S.
; EXAMPLES:
;	AR/=<24:26>D,0	OR	AR/=0,3,26,D
;	THE MICROCODE FIELD WHICH CONTROLS THE AR MIXER (AND THEREFORE
; THE DATA TO BE LOADED INTO AR ON EACH EBOX CLOCK) IS THREE BITS WIDE
; AND THE RIGHTMOST BIT IS SHOWN IN THE LISTING AS BIT 26 OF THE
; MICROINSTRUCTION.  IF NO VALUE IS SPECIFICALLY REQUESTED FOR THE FIELD,
; THE MICROASSEMBLER WILL ENSURE THAT THE FIELD IS 0.
;	AD/=<12:17>	OR	AD/=0,6,17
;	THE FIELD WHICH CONTROLS THE AD IS 6 BITS WIDE, ENDING ON
; BIT 17.  THE FOURTH PARAMETER OF THE FIELD IS OMITTED, SO THE FIELD
; IS AVAILABLE TO THE MICROASSEMBLER (IF NO VALUE IS EXPLICITLY
; CALLED OUT FOR THE FIELD) FOR MODIFICATION TO ENSURE ODD PARITY IN THE
; ENTIRE WORD.
;(2)	VALUE DEFINITIONS
;	FOLLOWING A FIELD DEFINITION, SYMBOLS MAY BE CREATED IN THAT
; FIELD TO CORRESPOND TO VALUES OF THE FIELD.  THE FORM IS:
;	SYMBOL=N,T1,T2
;	"N" IS, IN OCTAL, THE VALUE OF SYMBOL WHEN USED IN THE FIELD.
; T1 AND T2 ARE OPTIONAL, AND SPECIFY PARAMETERS IN THE TIME FIELD
; CALCULATION FOR MICROINSTRUCTIONS IN WHICH THIS FIELD/SYMBOL IS USED.
; THE MICROASSEMBLER COMPUTES THE SUMS OF ALL THE T1'S AND ALL THE T2'S
; SPECIFIED FOR FIELD/SYMBOL SPECIFICATIONS IN A WORD, AND USES THE MAX
; OF THE TWO SUMS AS THE DEFAULT VALUE FOR THE FIELD WHOSE DEFAULT
; MECHANISM IS "T".  EXAMPLES:
;	AD/=<12:17>	;FIELD DEFINITION IN WHICH FOLLOWING SYMBOLS EXIST
;	XOR=31
;	A+B=6,1
;	HERE THE SYMBOLS "XOR" AND "A+B" ARE DEFINED FOR THE "AD" FIELD.
; TO THE ASSEMBLER, THEREFORE, WRITING "AD/XOR" MEANS PUT THE VALUE 31
; INTO THE 6-BIT FIELD ENDING ON BIT 17 OF THE MICROWORD.  THE SYMBOLS
; ARE CHOSEN FOR MNEMONIC SIGNIFICANCE, OF COURSE, SO ONE READING
; THE MICROCODE WOULD INTERPRET "AD/XOR" AS "THE OUTPUT OF AD SHALL BE THE
; EXCLUSIVE OR OF ITS A AND B INPUTS".  SIMILIARLY, "AD/A+B" IS READ AS
; "AD PRODUCES THE SUM OF A AND B".  THE SECOND PARAMETER IN THE DEFINITION
; OF "A+B" IS A CONTROL TO THE MICRO ASSEMBLER'S TIME-FIELD CALCULATION,
; WHICH TELLS THE ASSEMBLER THAT THIS OPERATION TAKES LONGER THAN THE
; BASIC CYCLE, AND THEREFORE THAT THE TIME FIELD SHOULD BE INCREASED.
;	AR/=<24:26>D,0	;FIELD DEFINITION FOR FOLLOWING SYMBOLS
;	AR=0
;	AD=2
;	HERE THE SYMBOLS "AR" AND "AD" ARE DEFINED FOR THE FIELD NAMED
; "AR", WHICH CONTROLS THE AR MIXER.  WE COULD WRITE AR/AR TO MEAN THAT
; THE AR MIXER SELECT INPUTS WOULD BE 0, WHICH IN THE 
; HARDWARE SELECTS THE AR OUTPUT FOR RECIRCULATION TO THE REGISTER.  IN
; PRACTICE, HOWEVER, WE WANT THIS TO BE THE DEFAULT CASE, SO THAT AR
; DOES NOT CHANGE UNLESS WE SPECIFICALLY REQUEST IT, SO THE FIELD
; DEFINITION SPECIFIES 0 AS THE DEFAULT VALUE OF THE FIELD.  IF WE
; WANT AR LOADED FROM THE AD OUTPUT, WE WRITE "AR/AD" TO SET THE
; MIXER SELECTS TO PASS THE AD OUTPUT INTO THE AR.
;
;(3)	LABEL DEFINITIONS
;	A MICRO INSTRUCTION MAY BE LABELLED BY A SYMBOL FOLLOWED BY COLON
; PRECEDING THE MICROINSTRUCTION DEFINITION.  THE ADDRESS OF THE
; MICROINSTRUCTION BECOMES THE VALUE OF THE SYMBOL IN THE FIELD NAMED "J".
; EXAMPLE:
;	FOO:	J/FOO
;	THIS IS A MICROINSTRUCTION WHOSE "J" FIELD (JUMP ADDRESS) CONTAINS
; THE VALUE "FOO".  IT ALSO DEFINES THE SYMBOL "FOO" TO BE THE ADDRESS
; OF ITSELF.  THEREFORE, IF EXECUTED BY THE MICROPROCESSOR, IT WOULD
; LOOP ON ITSELF.
;
;(4)	COMMENTS
;	A SEMICOLON ANYWHERE ON A LINE CAUSES THE REST OF THE LINE
; TO BE IGNORED BY THE ASSEMBLER.  THIS TEXT IS AN EXAMPLE OF COMMENTS.
;(5)	MICROINSTRUCTION DEFINITION
;	A WORD OF MICROCODE IS DEFINED BY SPECIFYING A FIELD NAME,
; FOLLOWED BY SLASH (/), FOLLOWED BY A VALUE.  THE VALUE MAY BE A
; SYMBOL DEFINED FOR THAT FIELD, AN OCTAL DIGIT STRING, OR A DECIMAL
; DIGIT STRING (DISTINGUISHED BY THE FACT THAT IT CONTAINS "8" AND/OR
; "9" AND/OR IS TERMINATED BY A PERIOD). SEVERAL FIELDS MAY BE SPECIFIED
; IN ONE MICROINSTRUCTION BY SEPARATING FIELD/VALUE SPECIFICATIONS WITH
; COMMAS.  EXAMPLE:
;	ADB/BR,ADA/AR,AD/A+B,AR/AD
;	THE FIELD NAMED "ADB" IS GIVEN THE VALUE NAMED "BR" (TO
; CAUSE THE MIXER ON THE B SIDE OF AD TO SELECT BR), FIELD "ADA" HAS VALUE
; "AR", FIELD "AD" HAS VALUE "A+B", AND FIELD "AR" HAS VALUE "AD".
;
;(6)	CONTINUATION
;	THE DEFINITION OF A MICROINSTRUCTION MAY CONTINUED ONTO TWO OR
; MORE LINES BY BREAKING IT AFTER ANY COMMA.  IN OTHER WORDS, IF THE
; LAST NON-BLANK, NON-COMMENT CHARACTER ON A LINE IS A COMMA, THE
; INSTRUCTION SPECIFICATION IS CONTINUED ON THE FOLLOWING LINE.
; EXAMPLE:
;	ADB/BR,ADA/AR,		;SELECT AR & BR AS AD INPUTS
;		AD/A+B,AR/AD	;TAKE THE SUM INTO AR
; BY CONVENTION, CONTINUATION LINES ARE INDENTED AN EXTRA TAB.
;
;(7)	MACROS
;	A MACRO IS A SYMBOL WHOSE VALUE IS ONE OR MORE FIELD/VALUE
; SPECIFICATIONS AND/OR MACROS.  A MACRO DEFINITION IS A LINE CONTAINING
; THE MACRO NAME FOLLOWED BY A QUOTED STRING WHICH IS THE VALUE OF THE
; MACRO.  EXAMPLE:
;	AR_AR+BR	"ADB/BR,ADA/AR,AD/A+B,AR/AD"
; THE APPEARANCE OF A MACRO IN A MICROINSTRUCTION DEFINITION IS EQUIVALENT
; TO THE APPEARANCE OF ITS VALUE.  MACROS FOR VARIOUS FUNCTIONS
; ARE DEFINED IN "MACRO.MIC".
;
;(8)	PSEUDO OPS
;	THE MICRO ASSEMBLER HAS 10 PSEUDO-OPERATORS:
;.DCODE AND .UCODE SELECT THE RAM INTO WHICH SUBSEQUENT MICROCODE WILL
;BE LOADED, AND THEREFORE THE FIELD DEFINITIONS AND MACROS WHICH ARE
;MEANINGFUL IN SUBSEQUENT MICROCODE
;.TITLE DEFINES A STRING OF TEXT TO APPEAR IN THE PAGE HEADER, AND
;.TOC DEFINES AN ENTRY FOR THE TABLE OF CONTENTS AT THE BEGINNING.
;.SET DEFINES THE VALUE OF A CONDITIONAL ASSEMBLY PARAMETER,
;.CHANGE REDEFINES A CONDITIONAL ASSEMBLY PARAMETER,
;.DEFAULT ASSIGNS A VALUE TO AN UNDEFINED PARAMETER.
;.IF ENABLES ASSEMBLY IF THE VALUE OF THE PARAMETER IS NOT ZERO,
;.IFNOT ENABLES ASSEMBLY IF THE PARAMETER VALUE IS ZERO, AND
;.ENDIF RE-ENABLES ASSEMBLY IF SUPPRESSED BY THE PARAMETER NAMED.
;(9)	LOCATION CONTROL
;	A MICROINSTRUCTION "LABELLED" WITH A NUMBER IS ASSIGNED TO THAT
; ADDRESS.
;	THE CHARACTER "=" AT THE BEGINNING OF A LINE, FOLLOWED BY
; A STRING OF 0'S, 1'S, AND/OR *'S, SPECIFIES A CONSTRAINT ON THE
; ADDRESS OF FOLLOWING MICROINSTRUCTIONS.  THE NUMBER OF CHARACTERS
; IN THE CONSTRAINT STRING (EXCLUDING THE "=") IS THE NUMBER OF LOW-ORDER
; BITS CONSTRAINED IN THE ADDRESS.  THE MICROASSEMBLER ATTEMPTS TO FIND
; AN UNUSED LOCATION WHOSE ADDRESS HAS 0 BITS IN THE POSITIONS
; CORRESPONDING TO 0'S IN THE CONSTRAINT STRING AND 1 BITS WHERE THE
; CONSTRAINT HAS 1'S.  ASTERISKS DENOTE "DON'T CARE" BIT POSITIONS.
;	IF THERE ARE ANY 0'S IN THE CONSTRAINT STRING, THE CONSTRAINT
; IMPLIES A BLOCK OF <2**N> MICROWORDS, WHERE N IS THE NUMBER OF 0'S
; IN THE STRING.  ALL LOCATIONS IN THE BLOCK WILL HAVE 1'S IN THE ADDRESS
; BITS CORRESPONDING TO 1'S IN THE STRING, AND BIT POSITIONS DENOTED BY *'S
; WILL BE THE SAME IN ALL LOCATIONS OF THE BLOCK.
;	IN SUCH A CONSTRAINT BLOCK, THE DEFAULT ADDRESS PROGRESSION IS
; COUNTING IN THE "0" POSITIONS OF THE CONSTRAINT STRING, BUT A NEW
; CONSTRAINT STRING OCCURING WITHIN A BLOCK MAY FORCE SKIPPING OVER
; SOME LOCATIONS OF THE BLOCK.  WITHIN A BLOCK, A NEW CONSTRAINT
; STRING DOES NOT CHANGE THE PATTERN OF DEFAULT ADDRESS PROGRESSION, IT
; MERELY ADVANCES THE LOCATION COUNTER OVER THOSE LOCATIONS.  THE
; MICROASSEMBLER WILL LATER FILL THEM IN.
;	A NULL CONSTRAINT STRING ("=" FOLLOWED BY ANYTHING BUT "0",
; "1", OR "*") SERVES TO TERMINATE A CONSTRAINT BLOCK.
; EXAMPLES:
;	=0	
;	THIS SPECIFIES THAT THE LOW-ORDER ADDRESS BIT MUST BE ZERO--
; THE MICROASSEMBLER FINDS AN EVEN-ODD PAIR OF LOCATIONS, AND PUTS
; THE NEXT TWO MICROINSTRUCTIONS INTO THEM.
;	=11
;	THIS SPECIFIES THAT THE TWO LOW-ORDER BITS OF THE ADDRESS MUST
; BOTH BE ONES.  SINCE THERE ARE NO 0'S IN THIS CONSTRAINT, THE
; ASSEMBLER FINDS ONLY ONE LOCATION MEETING THE CONSTRAINT.
;	=0*****
;	THIS SPECIFIES AN ADDRESS IN WHICH THE "40" BIT IS ZERO.  DUE
; TO THE IMPLEMENTATION OF THIS FEATURE IN THE ASSEMBLER,  THE DEFAULT
; ADDRESS PROGRESSION APPLIES ONLY TO THE LOW-ORDER 5 BITS, SO THIS
; CONSTRAINT FINDS ONE WORD IN WHICH THE "40" BIT IS ZERO, AND DOES
; NOT ATTEMPT TO FIND ONE IN WHICH THAT BIT IS A ONE.
;THIS LIMITATION HAS BEEN CHANGED WITH NEWER ASSEMBLER VERSIONS.
;HOWEVER NONE OF THE LOCATIONS IN THE MICROCODE REQUIRE ANYTHING BUT THE
;CONSTRAINT MENTIONED ABOVE.
.TOC	"MICROCODE LISTING TEMPLATE"
;HERE IS A TEMPLATE WHICH CAN BE USED WITH THE MICROCODE
; LISTING TO IDENTIFY FIELDS IN THE OUTPUT --


; ----  ---- ---- ---- ---- ---- ---- ----
; [--]  [--] []!! !!!! !!!! !![] [][] ![-]
;   !     !   !!! !!!! !!!! !! !  ! ! ! + # = MAGIC NUMBERS
;   !     !   !!! !!!! !!!! !! !  ! ! + MARK = SCOPE SYNC
;   !     !   !!! !!!! !!!! !! !  ! !
;   !     !   !!! !!!! !!!! !! !  ! + CALL, DISP/SPEC = SPEC FUNCTIONS
;   !     !   !!! !!!! !!!! !! !  + SKIP/COND = SPECIAL FUNCTIONS
;   !     !   !!! !!!! !!!! !! !
;   !     !   !!! !!!! !!!! !! + TIME, MEM = UINST TIME & MEM FUNCTION
;   !     !   !!! !!!! !!!! !+ VMA = VMA INPUT SELECT
;   !     !   !!! !!!! !!!! + SH/ARMM = SH FUNCTION / ARMM SELECT
;   !     !   !!! !!!! !!!!
;   !     !   !!! !!!! !!!+ SC, FE = SC INPUT SELECT & FE LOAD
;   !     !   !!! !!!! !!+ SCADB = SELECT FOR SCAD "B" INPUT
;   !     !   !!! !!!! !+ SCADA = ENABLE AND SELECT FOR SCAD "A" INPUT
;   !     !   !!! !!!! + SCAD = SC/FE ADDER FUNCTION
;   !     !   !!! !!!!
;   !     !   !!! !!!+ FM ADR = FAST MEMORY ADDRESS SELECT
;   !     !   !!! !!+ BR, BRX, MQ = LOAD BR & BRX, SEL FOR MQ
;   !     !   !!! !+ ARX = SELECT FOR ARX INPUT
;   !     !   !!! + AR = SELECT FOR AR INPUT
;   !     !   !!!
;   !     !   !!+ ADB = SELECT FOR ADDER "B" INPUT
;   !     !   !+ ADA = SELECT AND ENABLE FOR ADDER "A" INPUT
;   !     !   + AD = OPERATION IN ADDER AND ADDER EXTENSION
;   !     !
;   !     + J = BASE ADDRESS TO WHICH THIS MICROINSTRUCTION JUMPS
;   !
;   + LOCATION IN CRAM INTO WHICH THIS WORD IS LOADED
;
; U/V = MICRO INSTRUCTION FOR CRAM

;*******************************************************************

; D = WORD FOR DRAM
;
;   + LOCATION IN DRAM INTO WHICH THIS WORD IS LOADED
;   !
;   !   + A = OPERAND ACCESS CONTROL
;   !   !+ B = INSTRUCTION "MODE"
;   !   !! + P = PARITY FOR THIS WORD
;   !   !! !
;   !   !! !   + J = ADDRESS OF HANDLER FOR THIS INSTRUCTION
; [--]  !! ! [--]
; ----  ---- ----
.TOC	"KL10 INSTRUCTION OPCODE MAP"

;	0	1	2	3	4	5	6	7
;100	UUO	UUO	UUO	UUO	UUO	ADJSP	UUO	SXCT
;110	DFAD	DFSB	DFMP	DFDV	DADD	DSUB	DMUL	DDIV
;120	DMOVE	DMOVN	FIX	EXTEND	DMOVEM	DMOVNM	FIXR	FLTR
;130	UFA	DFN	FSC	IBP	ILDB	LDB	IDPB	DPB
;140	FAD	FADL	FADM	FADB	FADR	FADRI	FADRM	FADRB
;150	FSB	FSBL	FSBM	FSBB	FSBR	FSBRI	FSBRM	FSBRB
;160	FMP	FMPL	FMPM	FMPB	FMPR	FMPRI	FMPRM	FMPRB
;170	FDV	FDVL	FDVM	FDVB	FDVR	FDVRI	FDVRM	FDVRB
;	0	1	2	3	4	5	6	7
;200	MOVE	MOVEI	MOVEM	MOVES	MOVS	MOVSI	MOVSM	MOVSS
;210	MOVN	MOVNI	MOVNM	MOVNS	MOVM	MOVMI	MOVMM	MOVMS
;220	IMUL	IMULI	IMULM	IMULB	MUL	MULI	MULM	MULB
;230	IDIV	IDIVI	IDIVM	IDIVB	DIV	DIVI	DIVM	DIVB
;240	ASH	ROT	LSH	JFFO	ASHC	ROTC	LSHC	UUO
;250	EXCH	BLT	AOBJP	AOBJN	JRST	JFCL	XCT	MAP
;260	PUSHJ	PUSH	POP	POPJ	JSR	JSP	JSA	JRA
;270	ADD	ADDI	ADDM	ADDB	SUB	SUBI	SUBM	SUBB
;	0	1	2	3	4	5	6	7
;300	CAI	CAIL	CAIE	CAILE	CAIA	CAIGE	CAIN	CAIG
;310	CAM	CAML	CAME	CAMLE	CAMA	CAMGE	CAMN	CAMG
;320	JUMP	JUMPL	JUMPE	JUMPLE	JUMPA	JUMPGE	JUMPN	JUMPG
;330	SKIP	SKIPL	SKIPE	SKIPLE	SKIPA	SKIPGE	SKIPN	SKIPG
;340	AOJ	AOJL	AOJE	AOJLE	AOJA	AOJGE	AOJN	AOJG
;350	AOS	AOSL	AOSE	AOSLE	AOSA	AOSGE	AOSN	AOSG
;360	SOJ	SOJL	SOJE	SOJLE	SOJA	SOJGE	SOJN	SOJG
;370	SOS	SOSL	SOSE	SOSLE	SOSA	SOSGE	SOSN	SOSG
;	0	1	2	3	4	5	6	7
;400	SETZ	SETZI	SETZM	SETZB	AND	ANDI	ANDM	ANDB
;410	ANDCA	ANDCAI	ANDCAM	ANDCAB	SETM	SETMI	SETMM	SETMB
;420	ANDCM	ANDCMI	ANDCMM	ANDCMB	SETA	SETAI	SETAM	SETAB
;430	XOR	XORI	XORM	XORB	IOR	IORI	IORM	IORB
;440	ANDCB	ANDCBI	ANDCBM	ANDCBB	EQV	EQVI	EQVM	EQVB
;450	SETCA	SETCAI	SETCAM	SETCAB	ORCA	ORCAI	ORCAM	ORCAB
;460	SETCM	SETCMI	SETCMM	SETCMB	ORCM	ORCMI	ORCMM	ORCMB
;470	ORCB	ORCBI	ORCBM	ORCBB	SETO	SETOI	SETOM	SETOB
;	0	1	2	3	4	5	6	7
;500	HLL	HLLI	HLLM	HLLS	HRL	HRLI	HRLM	HRLS
;510	HLLZ	HLLZI	HLLZM	HLLZS	HRLZ	HRLZI	HRLZM	HRLZS
;520	HLLO	HLLOI	HLLOM	HLLOS	HRLO	HRLOI	HRLOM	HRLOS
;530	HLLE	HLLEI	HLLEM	HLLES	HRLE	HRLEI	HRLEM	HRLES
;540	HRR	HRRI	HRRM	HRRS	HLR	HLRI	HLRM	HLRS
;550	HRRZ	HRRZI	HRRZM	HRRZS	HLRZ	HLRZI	HLRZM	HLRZS
;560	HRRO	HRROI	HRROM	HRROS	HLRO	HLROI	HLROM	HLROS
;570	HRRE	HRREI	HRREM	HRRES	HLRE	HLREI	HLREM	HLRES
;	0	1	2	3	4	5	6	7
;600	TRN	TLN	TRNE	TLNE	TRNA	TLNA	TRNN	TLNN
;610	TDN	TSN	TDNE	TSNE	TDNA	TSNA	TDNN	TSNN
;620	TRZ	TLZ	TRZE	TLZE	TRZA	TLZA	TRZN	TLZN
;630	TDZ	TSZ	TDZE	TSZE	TDZA	TSZA	TDZN	TSZN
;640	TRC	TLC	TRCE	TLCE	TRCA	TLCA	TRCN	TLCN
;650	TDC	TSC	TDCE	TSCE	TDCA	TSCA	TDCN	TSCN
;660	TRO	TLO	TROE	TLOE	TROA	TLOA	TRON	TLON
;670	TDO	TSO	TDOE	TSOE	TDOA	TSOA	TDON	TSON
.TOC	"CONTROL RAM DEFINITIONS -- J, AD"
;FIELDS ARRANGED FOR READABILITY, NOT COMPACTNESS
; IN THE PROCESSOR, BITS ARE SCATTERED IN ANOTHER ORDER

U0/=<0:0>D,0	;BIT 0 UNUSED
J/=<1:11>+	;SYMBOLS WILL BE DEFINED BY TAGS (CRA1&CRA2)

;MAIN ADDER CONTROLS

AD/=<12:17>	; (EDP3, EXCEPT CARRY IN, ON CTL1)
		;BIT 0 = CARRY IN, BIT 1 = BOOLE
		;BITS 2-5 = S8-S1 OF 10181 ALU
		;ARITHMETIC, AD AND ADX SEPARATED
		;72 BIT ARITHMETIC REQUIRES SPEC/AD LONG
	A+1=40,1
	A+XCRY=00,1
;	A+ANDCB=01,1
;	A+AND=02,1
	A*2=03,1
	A*2+1=43,1
;	OR+1=44,1
;	OR+ANDCB=05,1
	A+B=06,1
	A+B+1=46,1
;	A+OR=07,1
	ORCB+1=50,1
	A-B-1=11,1
	A-B=51,1
;	AND+ORCB=52,1
;	A+ORCB=53,1
	XCRY-1=54,1
;	ANDCB-1=15,1
;	AND-1=16,1
	A-1=17,1
		;ADDER LOGICAL FUNCTIONS
	SETCA=20
	ORC=21		;NAND
	ORCA=22
	1S=23
	ANDC=24		;NOR
	SETCB=25
	EQV=26
	ORCB=27
	ANDCA=30
	XOR=31
	B=32
	OR=33
	0S=34
	ANDCB=35
	AND=36
	A=37
		;BOOLEAN FUNCTIONS FOR WHICH CRY0 IS INTERESTING
	CRY A EQ -1=60,1	;GENERATE CRY0 IF A=1S, AD=SETCA
	CRY A.B#0=36,1		;CRY 0 IF A&B NON-ZERO, AD=AND
	CRY A#0=37,1		;GENERATE CRY0 IF A .NE. 0, AD=A
	CRY A GE B=71,1		;CRY0 IF A .GE. B, UNSIGNED; AD=XOR
.TOC	"CONTROL RAM DEFINITIONS -- DATA PATH MIXERS"

ADA/=<18:20>		; (EDP3)
	AR=0
	ARX=1
	MQ=2
	PC=3
ADA EN/=<18:18>		;ADA ENABLE ALSO ENABLES ADXA (EDP3)
	EN=0
	0S=1
U21/=<21:21>D,0		;BIT 21 UNUSED
ADB/=<22:23>		;CONTROLS ADB AND ADXB (EDP3)
	FM=0,,1		;MUST HAVE TIME FOR PARITY CHECK
	BR*2=1
	BR=2
	AR*4=3
U23/=<23:23>D,1		;PREVENT DEFAULT SELECTION OF FM
			;FORCE IT TO TAKE ONE OF THE SHORTER
			;PATHS IF FM NOT NEEDED ALSO DISABLES
			;PARITY CHECKING LOGIC

;REGISTER INPUTS

AR/=<24:26>D,0		; (EDP1)
	AR=0
	ARMM=0		;REQUIRES SPECIAL FUNCTION
	CACHE=1		;ORDINARILY SELECTED BY HWARE
	AD=2
	EBUS=3
	SH=4
	AD*2=5
	ADX=6
	AD*.25=7
ARX/=<27:29>D,0		; (EDP2)
;	ARX=0		;BY DEFAULT
	CACHE=1		;ORDINARILY BY MBOX RESP
	AD=2
	MQ=3
	SH=4
	ADX*2=5
	ADX=6
	ADX*.25=7
BR/=<30:30>D,0		;DEFAULT TO RECIRCULATE (EDP4)
	AR=1
BRX/=<31:31>D,0		;DEFAULT TO RECIRCULATE (EDP4)
	ARX=1
MQ/=<32:32>D,0		;DEFAULT TO RECIRCULATE (EDP2)
	SH=1		;LOAD FROM SHIFT MATRIX
	MQ*2=0		;WITH SPEC/MQ SHIFT
	MQ*.25=1	;WITH SPEC/MQ SHIFT
	MQ SEL=0	;WITH COND/REG CTL
	MQM SEL=1	;WITH COND/REG CTL
;FMADR SELECTS THE SOURCE OF THE FAST MEMORY ADDRESS,
; RATHER THAN PROVIDING THE ADDRESS ITSELF

FMADR/=<33:35>		; (APR4&APR5)
	AC0=0		;IR 9-12
	AC1=1		;<IR 9-12>+1 MOD 16
	XR=2		;ARX 14-17
	VMA=3		;VMA 32-35
	AC2=4		;<IR 9-12>+2 MOD 16
	AC3=5		;<IR 9-12>+3 MOD 16
.IFNOT/MODEL.B
	AC4=6		;CURRENT BLOCK, AC+4
.IF/MODEL.B
	AC+#=6		;CURRENT BLOCK, AC+ MAGIC #
.ENDIF/MODEL.B
	#B#=7		;BLOCK AND AC SELECTED BY # FIELD

.TOC	"CONTROL RAM DEFINITIONS -- 10-BIT LOGIC"

SCAD/=<36:38>		; (SCD1)
	A=0
	A-B-1=1
	A+B=2
	A-1=3
	A+1=4
	A-B=5
	OR=6
	AND=7
SCADA/=<39:41>		; (SCD1)
	FE=0
	AR0-5=1		;BYTE POINTER P FIELD
	AR EXP=2	;<AR 01-08> XOR <AR 00>
	#=3		;SIGN EXTENDED WITH #00
SCADA EN/=<39:39>	; (SCD1)
	0S=1
U42/=<42:42>D,0	;BIT 42 UNUSED
SCADB/=<43:44>		; (SCD1)
	SC=0
	AR6-11=1	;BYTE POINTER S FIELD
	AR0-8=2
	#=3		;NO SIGN EXTENSION
U45/=<45:45>D,0		;BIT 45 UNUSED
SC/=<46:46>D,0		;RECIRCULATE BY DEFAULT (SCD2)
	FE=0		;WITH SCM ALT
	SCAD=1
	AR SHIFT=1	;WITH SCM ALT ;AR 18, 28-35
FE/=<47:47>D,0		;RECIRCULATE BY DEFAULT (SCD2)
	SCAD=1
U48/=<48:48>D,0		;BIT 48 UNUSED
.TOC	"CONTROL RAM DEFINITIONS -- SHIFT, ARMM, VMA, TIME"

SH/=<49:50>		; (SH1)
	SHIFT AR!ARX=0	;LEFT BY (SC)
	AR=1
	ARX=2
	AR SWAP=3	;HALVES SWAPPED
ARMM/=<49:50>		;SAME BITS AS SH CONTROL (SCD3)
	#=0		;MAGIC # 0-8 TO AR 0-8
	EXP_SIGN=1	;AR1-8 _ AR0
	SCAD EXP=2	;AR0-8_SCAD
	SCAD POS=3	;AR0-5_SCAD
.IF/MODEL.B
VMAX/=<49:50>		;SAME BITS AS SH CONTROL (VMA4)
	VMAX=0		;VMA SECTION #
	PC SEC=1	;PC SECTION #
	PREV SEC=2	;PREVIOUS CONTEXT SECT
	AD12-17=3
.ENDIF/MODEL.B
U51/=<51:51>D,0		;BIT 51 UNUSED
VMA/=<52:53>D,0		;ALSO CONTROLLED BY SPECIAL FUNCTIONS
	VMA=0		;BY DEFAULT
	PC=1		;MAY BE OVERRIDDEN BY MCL LOGIC	TO LOAD FROM AD
	LOAD=1		; IF WE KNOW IT WILL BE OVERRIDDEN, USE THIS
	PC+1=2
	AD=3		;ENTIRE VMA, INCLUDING SECTION
TIME/=<54:55>T		;CONTROLS MINIMUM MICROINSTRUCTION EXECUTION
			; TIME, COUNTING MBOX CLOCK TICKS (CLK)
			;ASSEMBLER GENERALLY TAKES CARE OF THIS
	2T=0		;2 TICKS
	3T=1		;3 TICKS
	4T=2		;4 TICKS
	5T=3		;5 TICKS (COND/DIAG FUNC & #00, --> .5 USEC)
.TOC	"CONTROL RAM DEFINITIONS -- MEM SPECIAL FUNCTIONS"

MEM/=<56:59>D,0		; (MCL1)
;	NOP=0		;DEFAULT
	ARL IND=1	;CONTROL AR LEFT MUX FROM # FIELD
	MB WAIT=2	;WAIT FOR MBOX RESP IF PENDING
	A RD=4		;OPERAND READ
	B WRITE=5	;CONDITIONAL WRITE ON DRAM B 01
	FETCH=6		;LOAD NEXT INSTR TO ARX (CONTROL BY #)
	REG FUNC=7	;MBOX REGISTER FUNCTIONS
	LOAD AR=12
	LOAD ARX=13
.IFNOT/MODEL.B		;OLD-STYLE MCL BOARD
	SEC 0=3		;CLEAR VMAX
	A IND=10	;A-TYPE INDIRECT
	BYTE IND=11	;BYTE-TYPE INDIRECT
	AD FUNC=14	;FUNCTION FROM AD LEFT
	BYTE RD=15	;BYTE READ TO BOTH AR AND ARX
	WRITE=16	;FROM AR TO MEMORY
	RPW=17		;LOAD AR WITH RPW CYCLE
.IF/MODEL.B
	RESTORE VMA=3	;AD FUNC WITHOUT GENERATING A REQUEST
	AD FUNC=10	;FUNCTION LOADED FROM AD LEFT
	EA CALC=11	;FUNCTION DECODED FROM # FIELD
	RW=14		;READ, TEST WRITABILITY
	RPW=15		;READ-PAUSE-WRITE
	WRITE=16
	IFET=17		;UNCONDITIONAL FETCH
.ENDIF/MODEL.B
.TOC	"CONTROL RAM DEFINITIONS -- SKIP/COND SPECIAL FUNCTIONS"

SKIP/=<60:65>D,0	;MICRO-PROGRAM SKIPS
			; 40-57 DECODED ON (CRA2)
;	SPARE=40
	EVEN PAR=41,,1	;AR PARITY IS EVEN
	BR0=42		;BR BIT 00
	ARX0=43		;ARX BIT 00
	AR18=44		;AR BIT 18
	AR0=45		;AR BIT 00
	AC#0=46		;IR9-12 .EQ. 0
	SC0=47		;SC BIT 00
.IFNOT/MODEL.B
	SC .LT. 36=50
.IF/MODEL.B
	PC SEC0=50
.ENDIF/MODEL.B
	SCAD0=51,,1	;SIGN OF SCAD OUTPUT
	SCAD#0=52,,1	;SCAD OUTPUT IS NON-ZERO
	ADX0=53,1	;ADDER EXTENSION BIT 00
	AD CRY0=54,1	;CARRY OUT OF AD BIT -2 (BOOLE IGNORED)
	AD0=55,1	;ADDER BIT 00
	AD#0=56,1	;AD BITS 00-35 CONTAIN SOME ONES
.IF/MODEL.B
	-LOCAL AC ADDR=57	;VMA18-31 =0 ON LOCAL REF IN SEC >1
.ENDIF/MODEL.B
			; 60-77 DECODED ON (CON2)
	FETCH=60	;VMA FETCH (LAST CYCLE WAS A FETCH)
	KERNEL=61	;PC IS IN KERNEL MODE
	USER=62		;PC IS IN USER MODE
	PUBLIC=63	;PC IS PUBLIC (INCLUDING SUPER)
	RPW REF=64	;MIDDLE OF READ-PAUSE-WRITE CYCLE
	PI CYCLE=65	;PI CYCLE IN PROGRESS
	-EBUS GRANT=66	;PI HASN'T RELEASED BUS FOR CPU USE
	-EBUS XFER=67	;NO TRANSFER RECIEVED FROM DEVICE
	INTRPT=70	;AN INTERRUPT REQUEST WAITING FOR SERVICE
	-START=71	;NO CONTINUE BUTTON
	RUN=72		;PROCESSOR NOT HALTED
	IO LEGAL=73	;KERNEL, PI CYCLE, USER IOT, OR DEVICE .GE. 740
	P!S XCT=74	;PXCT OR SXCT
.IF/MODEL.B
	-VMA SEC0=75	;VMA SECTION NUMBER (13-17) IS NOT ZERO
.ENDIF/MODEL.B
	AC REF=76,,1	;VMA .LT.20 ON READ OR WRITE
	-MTR REQ=77	;INTERRUPT REQUEST NOT DUE TO METER
;SKIP/COND FIELD CONTINUED

COND/=<60:65>D,0	;NON-SKIP SPECIAL FUNCTIONS
			;0-7 DECODED ON (CTL2)
;	NOP=0		;BY DEFAULT
	LD AR0-8=1
	LD AR9-17=2
	LD AR18-35=3
	AR CLR=4
	ARX CLR=5
	ARL IND=6	;CONTROL AR LEFT, CALL, AND CLEAR BITS FROM #
	REG CTL=7	;CONTROL AR LOAD, EXP TST, AND MQ FROM #
			; 10-37 DECODED ON (CON1)
	FM WRITE=10	;WRITE AR INTO CURRENTLY ADDRESSED FM LOC
	PCF_#=11	;SET PC FLAGS FROM # FIELD
	FE SHRT=12	;SHIFT FE RIGHT 1
	AD FLAGS=13	;SET PC CRY0, CRY1, OVRFLO, TRAP1 AS APPROPRIATE
	LOAD IR=14	;LATCH AD OR CACHE DATA INTO IR
	SPEC INSTR=15	;SET/CLR SXCT, PXCT, PICYC, TRAP INSTR FLAGS
	SR_#=16		;CONTROL FOR STATE REGISTER
	SEL VMA=17	;READ VMA THROUGH ADA/PC
	DIAG FUNC=20	;SELECT DIAGNOSTIC INFO ONTO EBUS
	EBOX STATE=21	;SET STATE FLOPS
	EBUS CTL=22	;I/O FUNCTIONS
	MBOX CTL=23
;	SPARE=24
.IF/MODEL.B
	LONG EN=25	;THIS WORD CAN BE INTERPRETED AS LONG INDIRECT
.ENDIF/MODEL.B
;	SPARE=26
;	SPARE=27
	VMA_#=30
	VMA_#+TRAP=31
	VMA_#+MODE=32
	VMA_#+AR32-35=33
	VMA_#+PI*2=34
	VMA DEC=35	;VMA_VMA-1
	VMA INC=36	;VMA_VMA+1
	LD VMA HELD=37	;HOLD VMA ON SIDE
.IFNOT/MODEL.B
U66/=<66:66>D,0		;BIT 66 UNUSED
.IF/MODEL.B
CALL/=<66:66>D,0	;CALL FUNCTION
	CALL=1		;GOOD TO 15 LEVELS IN MODEL B
.ENDIF/MODEL.B
.TOC	"CONTROL RAM DEFINITIONS -- DISP/SPEC SPECIAL FUNCTIONS"

DISP/=<67:71>D,10	;0-7 AND 30-37 ARE DISPATCHES (CRA1&CRA2)
	DIAG=0
	DRAM J=1
	DRAM A RD=2	;IMPLIES INH CRY18
	RETURN=3	;POPJ RETURN
	PG FAIL=4	;PAGE FAIL TYPE DISP
	SR=5		;16 WAYS ON STATE REGISTER
	NICOND=6	;NEXT INSTRUCTION CONDITION
	SH0-3=7,,2	;16 WAYS ON HIGH-ORDER BITS OF SHIFTER
	MUL=30		;IMPLIES MQ SHIFT, AD LONG
	DIV=31,,1	;IMPLIES MQ SHIFT, AD LONG
	SIGNS=32,1	;AR0*4 + BR0*2 + AD0
	DRAM B=33	;8 WAYS ON DRAM B FIELD
	BYTE=34,,1	;FPD*4 + BR12*2 + SCAD0
	NORM=35,2	;IMPLIES AD LONG
	EA MOD=36	;@*2 + XR
.IFNOT/MODEL.B
	EA TYPE=37
.ENDIF/MODEL.B

SPEC/=<67:71>D,10	;NON-DISPATCH SPECIAL FUNCTIONS (CTL1)
;	NOP=10		;DEFAULT
	INH CRY18=11
	MQ SHIFT=12	;ENABLE MQ*2, MQ SHRT2
	SCM ALT=13	;ENABLE FE, ARSHIFT
	CLR FPD=14
	LOAD PC=15
	XCRY AR0=16	;CARRY INTO AD IS XOR'D WITH AR00
	GEN CRY18=17
.IFNOT/MODEL.B
	SEC HOLD=20	;INHIBIT LOADING VMAX
	CALL=21		;MAX DEPTH 4, INCLUDING PAGE REFILL
.IF/MODEL.B
	STACK UPDATE=20	;CONTROL CRY18 IF LOCAL STACK
.ENDIF/MODEL.B
	ARL IND=22	;# SPECIFIES ARL MIX, ENABLES, & CALL
	MTR CTL=23	;# CONTROLS METERS
	FLAG CTL=24	;FUNCTION ENCODED IN # FIELD
	SAVE FLAGS=25	;TELLS PI CYCLE TO HOLD INTRPT
	SP MEM CYCLE=26	;MEM REQUEST IS MODIFIED BY #
	AD LONG=27	;AD BECOMES 72 BIT ALU

U73/=<72:73>D,0		;BITS 72-73 UNUSED

MARK/=<74:74>D,0	;FIELD SERVICE "MARK" BIT
.TOC	"CONTROL RAM DEFINITIONS -- MAGIC NUMBER FIELD"

#/=<75:83>D,0		;THE INFAMOUS "MAGIC NUMBERS"

	;THE OPTIONS DESIGNATE CERTAIN ASSEMBLIES FROM THE SAME
		;MICROCODE SOURCES
		;# BIT 0 INDICATES KLPAGING
		;# BIT 1 INDICATES EXTENDED ADDRESSING
		;# BIT 2 INDICATES NONSTANDARD MICROCODE
		;# BIT 8 INDICATES INSTRUCTION STATISTICS GATHERING
			;(I.E. TRACKS)
	;EACH OPTION BIT IS GIVEN A SEPERATE FIELD DEFINITION

KLPAGE/=<75:75>			;KLPAGING

.IF/KLPAGE
	OPTIONS=1
.IFNOT/KLPAGE
	OPTIONS=0
.ENDIF/KLPAGE


LONGPC/=<76:76>			;LONG PC FORMAT AS IN EXTENDED ADDRESSING
				; THIS IS A SLIGHTLY BASTARDIZED FORMAT IN
.IF/LONG.PC			; MODEL A MACHINES DUE TO SPACE LIMITATIONS
	OPTIONS=1
.IFNOT/LONG.PC
	OPTIONS=0
.ENDIF/LONG.PC


NONSTD/=<77:77>			;NONSTANDARD MICROCODE (IE DIAGNOSTIC MICROCODE)

.IF/NONSTD
	OPTIONS=1
.IFNOT/NONSTD
	OPTIONS=0
.ENDIF/NONSTD


ISTAT/=<83:83>			;STATISTICS GATHERING CODE (IE TRACKS)

.IF/INSTR.STAT
	OPTIONS=1
.IFNOT/INSTR.STAT
	OPTIONS=0
.ENDIF/INSTR.STAT


FM#/=<77:83>		;LOW 7 BITS OF # USED TO ADDRESS FM
			;WITH FMADR/#B#
.IF/MODEL.B
; WARNING !!! BECAUSE OF A TIMING PROBLEM IN THE HARDWARE ALL THESE
;		MUST HAVE THE NUMBER FIELD THE SAME IN THE PREVIOUS
;		MICROINSTRUCTION. THE SYMPTOM WILL BE GARBAGE WRITTEN IN A
;		DIFFERENT AC AS THE ADDRESS LINES DON'T MAKE IT IN TIME
;		FOR THE WRITE PULSE.
AC-OP/=<75:79>		;CONTROLS OPERATION ON AC AND AC#
	AC+#=6
	#=32		;JUST AC#
	OR=33		;AC <OR> AC#
		;ALL AD/ FUNCTIONS <40 WORK
AC#/=<80:83>		;NUMBER TO COMBINE WITH AC FIELD
.ENDIF/MODEL.B
;VARIOUS SPECIAL FUNCTIONS ENABLE SPECIAL DECODING OF THE
; "MAGIC #" FIELD, AS FOLLOWS:

;SPECIAL DATA PATH CONTROLS

.IFNOT/MODEL.B
CALL/=<75:75>		;ENABLED BY ARL IND (CTL2)
	CALL=1
.ENDIF/MODEL.B
AR0-8/=<76:76>		;ENABLED BY ARL IND (CTL2)
	LOAD=1
CLR/=<77:80>		;ENABLED BY ARL IND (CTL2)
	MQ=10
	ARX=4
	ARL=2
	ARR=1
	AR=3
	AR+ARX=7
	AR+MQ=13
	ARX+MQ=14
	AR+ARX+MQ=17
	ARL+ARX=6
	ARL+ARX+MQ=16
	ARR+MQ=11
ARL/=<81:83>		;ENABLED BY ARL IND (CTL2)
	ARL=0
	ARMM=0		;REQUIRES SPECIAL FUNCTION
	CACHE=1		;ORDINARILY SELECTED BY HWARE
	AD=2
	EBUS=3
	SH=4
	AD*2=5
	ADX=6
	AD*.25=7
AR CTL/=<75:77>		;ENABLED BY COND/REG CTL (CTL2)
	AR0-8 LOAD=4
	AR9-17 LOAD=2
	ARR LOAD=1
	ARL LOAD=6
EXP TST/=<80:80>	;ENABLED BY COND/REG CTL (CTL1)
	AR_EXP=1
MQ CTL/=<82:83>		;ENABLED BY COND/REG CTL (CTL2)
;	MQ=0		;WITH MQ/MQ SEL
	MQ*2=1		; "
;	MQ*.5=2		; " (DROPS BITS 0,6,12,18,24,30)
	0S=3		; "
	SH=0		;WITH MQ/MQM SEL
	MQ*.25=1	; "
	1S=2		; "
	AD=3		; "
;SPECIAL CONTROL OF EBOX FLAGS & FUNCTIONS

PC FLAGS/=<75:83>	;ENABLED BY COND/PCF_# (SCD4)
	AROV=420	;SET ARITH OVFLO & TRAP1
	FLOV=620	;SAME, PLUS FLOATING OVFLO
	FPD=100		;SET FIRST PART DONE
	TRAP2=40	;SET TRAP2 (PDL OVFLO)
	TRAP1=20	;SET TRAP1 (ARITH OVFLO)
	FXU=630		;FLOV + EXP UNDERFLOW
	DIV CHK=424	;NO DIVIDE + AROV
	FDV CHK=624	;FLOATING NO DIVIDE
FLAG CTL/=<75:83>	;ENABLED BY SPEC/FLAG CTL (SCD5)
	RSTR FLAGS=420	;AS IN JRSTF
	JFCL=602	;FORCE PC 00 = AROV
	JFCL+LD=622	;SECOND PART OF JFCL -- CLEAR TESTED FLAGS
	DISMISS=502	;CLEAR PI CYCLE IF SET (CON5)
			; ELSE DISMISS HIGHEST PI HOLD
	DISMISS+LD=522	;LOAD FLAGS AND DISMISS
	HALT=442	;STOP PROCESSOR IF LEGAL (CON2)
	SET FLAGS=20	;AS IN MUUO
	PORTAL=412	;CLEAR PUBLIC IF PRIVATE INSTR
SPEC INSTR/=<75:83>	;ENABLED BY COND/SPEC INSTR
	SET PI CYCLE=714; (CON5)
	KERNEL CYCLE=200;MAKE IO LEGAL, EXEC ADDR SPACE (CON4)
	INH PC+1=100	;TO MAKE JSR WORK IN TRAP, INTRPT (CON4)
	SXCT=40		;START SECTION XCT (MCL4)
	PXCT=20		;START PREV CONTXT XCT (MCL4)
	INTRPT INH=10	;INHIBIT INTERRUPTS (CON4)
	INSTR ABORT=4	; (CON2)
	HALTED=302	;TELL CONSOLE WE'RE HALTED (CON4)
	CONS XCT=310	;FLAGS FOR INSTR XCT'D FROM CONSOLE
	CONT=0		;RESTORE NORMAL STATE FOR CONTINUE
FETCH/=<75:83>		;ENABLED BY MEM/FETCH
	UNCOND=400
			;LOW 2 BITS DECODED ON (IR3)
	COMP=201,2	;DEPENDING ON AD AND DRAM B
	SKIP=202,2
	TEST=203,1
	JUMP=502,2	;AS IN JUMPX, ON AD AND DRAM B
	JFCL=503,1	;JUMP ON TEST CONDITION
;SPECIAL MEMORY REQUEST FUNCTIONS

.IF/MODEL.B
EA CALC/=<75:83>	;SPECIFIC CONTROLS FOR MEM/EA CALC
;	LOAD AR=400
;	LOAD ARX=200
;	PAUSE=100
;	WRITE=040	;SET VMA WRITE
;	PREV EN=20	;PREV CONTXT SELECTED BY SR AND PXCT
;	INDIRECT=10	;PREV CONTXT FOR EA CALC
;	EA=2		;RESTORATION OF ORIGINAL EA CONDITIONS
;	STACK=1		;PREV CONTXT SELECTED BY PXCT B12
.IF/XADDR		;JUST TO ARX FOR EXTENDED ADDRESSING
	A IND=230	;INDIRECT AT FIRST EA CALC TIME
.IFNOT/XADDR		;TO BOTH AR AND ARX AS IN MODEL A
	A IND=630	;INDIRECT AT FIRST EA CALC TIME
.ENDIF/XADDR
	BYTE RD=620	;READ BYTE DATA TO AR & ARX
	BYTE IND=610	;INDIRECT AT BYTE EA CALC TIME
	PUSH=041	;STORE TO STACK
	POP AR=421	;READ FROM STACK TO AR
	POP ARX=221	;READ FROM STACK TO ARX
	POP AR-ARX=621	;POP TO BOTH
	WRITE(E)=042
	LD AR(EA)=402	;LOAD AR GLOBAL/LOCAL AS IN EA
	LD AR+WR=440	;LOAD AR, TEST WRITABILITY
	LD ARX+WR=240	;LOAD ARX, TEST WRITABILITY
.ENDIF/MODEL.B

SP MEM/=<75:83>		;ENABLED BY SPEC/SP MEM CYCLE
	FETCH=400	;LOAD IR WHEN DATA ARRIVES (MCL5)
	USER=200	;FORCE USER OR UPT (MCL2)
	EXEC=100	;FORCE EXEC OR EPT (MCL3)
	SEC 0=40	;CLEAR VMAX (MCL4)
	UPT EN=20	;UPT IF USER EN (MCL3)
	EPT EN=10	;EPT IF NOT USER EN (MCL3)
	CACHE INH=2	; (MCL6)
	UNCSH+UNPAGE=103;UNCACHED AND UNPAGED
.IFNOT/MULTI
	UNPAGED=101	; (MCL6)
	EPT=111
	EPT FETCH=511
	UPT=221
	UPT FETCH=621
	PT=31
	PT FETCH=431
.IF/MULTI
	UNPAGED=103	; (MCL6)
	EPT=113
	EPT FETCH=513
	UPT=223
	UPT FETCH=623
	PT=33
	PT FETCH=433
.ENDIF/MULTI
;MBOX CONTROLS

MREG FNC/=<75:83>	;ENABLED BY MEM/REG FUNC (APR6)
	SBUS DIAG=407	;PERFORM SBUS DIAGNOSTIC CYCLE
	READ UBR=502	;ASK MBOX TO LOAD UBR INTO EBUS REG
	READ EBR=503	;PUT EBR INTO EBUS REG
	READ ERA=504
	WR REFILL RAM=505	;DISGUISED AS A "READ REG" FUNCTION
.IF/MODEL.B		;THIS GOT CHANGED IN THE GENERAL SPEEDUP (APR6)
	LOAD CCA=606	;START A SWEEP
.IFNOT/MODEL.B		;HERE IS WHAT IT USED TO BE
	LOAD CCA=601	;START A SWEEP
.ENDIF/MODEL.B
	LOAD UBR=602	;SETUP UBR FROM VMA
	LOAD EBR=603	;SETUP EBR FROM VMA
	MAP=140		;GET PHYS ADDR CORRESPONDING TO VMA (MCL6)
MBOX CTL/=<75:83>	;ENABLED BY COND/MBOX CTL (APR5)
	SET PAGE FAIL=200
	SET IO PF ERR=100
	PT DIR WR=20,1	;WRITE PAGE TABLE DIRECTORY
	PT WR=10,1	;WRITE PAGE TABLE ENTRY SELECTED BY VMA
	NORMAL=0	;RESET PT WR SELECTION
	PT DIR CLR=1	;SELECT FOR CLEARING PT DIR (PAG3)
	CLR PT LINE=21	;CLEAR VALID FOR 8 ENTRIES
MTR CTL/=<81:83>	;FUNCTION DECODING FOR METERS (MTR3)
	CLR TIME=0		; USUALLY USED WITH DIAG FUNC
	CLR PERF=1
	CLR E CNT=2
	CLR M CNT=3
	LD PA LH=4
	LD PA RH=5
	CONO MTR=6
	CONO TIM=7
;I/O FUNCTIONS

EBUS CTL/=<75:83>	;ENABLED BY COND/EBUS CTL (APR3)
	GRAB EEBUS=400	;"EBUS RETURN" TAKES ECL EBUS FOR EBOX
	REQ EBUS=200
	REL EBUS=100	; (CON3)
	EBUS DEMAND=60	;ASSERT DEMAND, KEEP CS, FUNC
	EBUS NODEMAND=20;DROP DEMAND, KEEP CS, FUNC
;	CTL_IR=10	;SELECT F01 & F02 FROM IR
;	DISABLE CS=4	;TURN OFF CONTROLLER SELECT
;	DATAIO=2	;0 FOR CONI/O
;	INPUT=1		;0 FOR OUTPUT
	IO INIT=30	;ENABLE IR3-9 TO EBUS CONTROLLER SELECT,
			; IR10-12 (DECODED) TO FUNCTION
			; AND AR ONTO EBUS IF FUNCTION IS OUTPUT
	DATAO=26	;0'S TO CS, DATAO TO FCN, AND AR TO EBUS
	DATAI=27	;0'S TO CS, DATAI TO FCN
	REL EEBUS=0	;LEGGO
DIAG FUNC/=<75:83>	;ENABLED BY COND/DIAG FUNC (CTL3)
	.5 USEC=400,3		;STRETCH CLOCK TO LET EBUS SETTLE (CON?)
	LD PA LEFT=404,3	;LH PERF ANAL CONTROLS FROM RH (MTR)
	LD PA RIGHT=405,3	;RH PA CONTROLS FROM RH (MTR)
	CONO MTR=406,3		;ACCOUNTING CONTROLS (MTR)
	CONO TIM=407,3		;INTERVAL TIMER CONTROLS (MTR)
	CONO APR=414,3		; (CON3)
	CONO PI=415,3		; (CON3)
	CONO PAG=416,3		;CACHE & PAGING CTL (CON3)
	DATAO APR=417,3		;ADDRESS BREAK (CON3)
	DATAO PAG=620,3		;AC BLOCKS & PREV CONTXT (CON3)
	LD AC BLKS=425,3	;FORCE LOADING AC BLOCKS
	LD PCS+CWSX=426,3	;FORCE LOADING PREV CONTXT SEC, CWSX
	CONI PI(R)=500,3	;PI HOLD & ACTIVE TO LH (PI)
	CONI PI(L)=501,3	;PI GEN TO LH (PI)
	CONI APR(R)=510,3	;APR INTERRUPT & PIA TO LH (APR6)
	RD TIME=510,3		;TIME BASE TO RH (MTR5)
	DATAI PAG(L)=511,3	;AC BLOCKS, PREV CONTXT TO LH (APR6)
	RD PERF CNT=511,3	;PERFORMANCE COUNT TO RH (MTR5)
	CONI APR(L)=512,3	;APR INTERRUPT ENABLES TO LH (APR6)
	RD EBOX CNT=512,3	;EBOX COUNT TO RH (MTR5)
	DATAI APR=513,3		;ADDR BREAK CONDITIONS TO LH (APR6)
	RD CACHE CNT=513,3	;CACHE COUNT TO RH (MTR5)
	RD INTRVL=514,3		;INTERVAL TIMER TO RH (MTR5)
	RD PERIOD=515,3		;PERIOD REGISTER TO RH (MTR5)
	CONI MTR=516,3		;CONTROLS & PIA TO RH (MTR5)
	RD MTR REQ=517,3	;ENCODED UPDATE REQUEST TO 20-22 (MTR5)
	CONI PI(PAR)=530,3	;WRITE EVEN PARITY ENABLES TO RH (CON1)
	CONI PAG=531,3		;CACHE & TRAP CTL TO RH (CON1)
	RD EBUS REG=567,3	;EBUS REGISTER IN MBOX (MBZ1 & MBC1)

PARITY/=0,0,0,P		;USE ANY AVAILABLE FIELD FOR PARITY
.TOC	"DISPATCH RAM DEFINITIONS"
;FIELDS ARE ARRANGED FOR EASY READING, NOT COMPACTNESS

	.DCODE
A/=<0:2>		;OPERAND FETCH MODE
	IMMED=0		;IMMEDIATE
	IMMED-PF=1	;IMMEDIATE, START PREFETCH
.IF/MODEL.B
	ADDR=2		;FULL EFFECTIVE ADDRESS
.ENDIF/MODEL.B
	WR-TST=3	;TEST WRITABILITY
	READ=4		;READ ONLY
	READ-PF=5	;READ, THEN PREFETCH
	RD-WR=6		;READ WRITE (SEPARATE CYCLES)
	RD-P-WR=7	;READ PAUSE WRITE

B/=<3:5>		;STORE RESULTS AT--
	DBL AC=1	;DOUBLE RESULT TO AC & AC+1
	DBL BOTH=2	;MULB, DIVB, ETC
	SELF=3		;SELF MODE INSTRUCTIONS
	AC=5		;SINGLE RESULT TO AC, PREFETCH IN PROG
	MEM=6		;RESULT TO MEMORY
	BOTH=7		;SINGLE RESULT TO MEMORY AND AC

	SJC-=3		;SKIP JUMP COMPARE CONTROLS
	SJCL=2
	SJCE=1
	SJCLE=0
	SJCA=7
	SJCGE=6
	SJCN=5
	SJCG=4
B0/=<3:3>		;INVERTS VARIOUS TEST, SKIP, AND JUMP CONTROLS
	CRY0(0)=0	;TEST TST CAUSES PC SKIP IF CRY0=0
	CRY0(1)=1	; SAME IF CRY0=1
B1-2/=<4:5>		;FLOATING RESULT STORE MODE
	AC=1	;RESULT TO AC
	MEM=2	;RESULT JUST TO MEM
	BOTH=3	;RESULT TO BOTH

PARITY/=<11:11>P

J/=<14:23>		;EXECUTOR (40&20-BITS ALWAYS 0)
	.UCODE

.BIN
 